import { __awaiter, __decorate, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { HttpClient, HttpHeaders, HttpEventType } from '@angular/common/http';
import { of } from 'rxjs';
import { Router } from '@angular/router';
import { Secure } from '../../enums/secure.enum';
import { Options } from './_models/base-data-options.model';
// import { plainToClassFromExist } from 'class-transformer';
import { UrlUtil } from '../../util/url/url.util';
import { ErrorDialogService } from '../../dialogs/error/error-dialog.service';
import { Dto } from '../../models/dto/dto.model';
import { map } from 'rxjs/operators';
import { LeathermanAppConfigInjectionToken } from '../../config/injection-tokens/leatherman-app-config.injection-token';
import { ErrorDialogServiceInjectionToken } from '../../config/injection-tokens/error-dialog-service.injection-token';
import { SearchResultsDto } from '../../models/dto/search-results-dto.model';
import { SearchResultsContainer } from '../../models/dto/search-results-container.model';
import { UploadEvent } from '../../models/events/upload-event.model';
import * as i0 from "@angular/core";
import * as i1 from "../../config/injection-tokens/leatherman-app-config.injection-token";
import * as i2 from "../../config/injection-tokens/error-dialog-service.injection-token";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common/http";
/**
 * The base data service for communicating with API endpoints
 */
let BaseDataService = class BaseDataService {
    /**
     * Constructor
     * @param config - The app config object
     * @param errorDialogService - A reference to the error dialog service
     * @param router - A reference to the router
     * @param httpClient - A reference to the HTTP client service
     */
    constructor(config, errorDialogService, router, httpClient) {
        this.config = config;
        this.errorDialogService = errorDialogService;
        this.router = router;
        this.httpClient = httpClient;
    }
    // **********************
    // * Protected properties
    // **********************
    /** Set accessor for the base endpoint */
    set baseEndpoint(baseEndpoint) {
        this._baseEndpoint = baseEndpoint;
        if (this._baseEndpoint.startsWith('/') === false) {
            this._baseEndpoint = '/' + this._baseEndpoint;
        }
        if (this._baseEndpoint.endsWith('/') === false) {
            this._baseEndpoint = this._baseEndpoint + '/';
        }
    }
    /** Set accessor for the base endpoint */
    get baseEndpoint() {
        return this._baseEndpoint;
    }
    /** Set accessor for the data service's item data type */
    set type(type) {
        this._type = type;
    }
    /** Set accessor for the api root */
    get apiRoot() {
        if (this.config.apiRoot) {
            return this.config.serverUrl + '/' + this.config.apiRoot;
        }
        return this.config.serverUrl;
    }
    /** Get accessor for the API key  */
    get apiKey() {
        return this.config.apiKey;
    }
    /** Get accessor for the no token header */
    get noTokenHeader() {
        return new HttpHeaders({
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            Pragma: 'no-cache',
            Expires: 'Sat, 01 Jan 2000 00:00:00 GMT'
        });
    }
    /** Get accessor to the header to use when the API endpoint is secured with an API key */
    get apiHeader() {
        const token = this.apiKey ? 'Bearer ' + this.apiKey : '';
        const apiHeader = new HttpHeaders({
            Authorization: token,
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            Pragma: 'no-cache',
            Expires: 'Sat, 01 Jan 2000 00:00:00 GMT'
        });
        return apiHeader;
    }
    /** Get acccessor for the header to use when the API endpoit is secured with a JWT token */
    get authHeader() {
        const localStorageToken = localStorage.getItem(this.config.jwtTokenName);
        const token = localStorageToken ? 'Bearer ' + localStorageToken : '';
        const authHeader = new HttpHeaders({
            Authorization: token,
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache',
            Pragma: 'no-cache',
            Expires: 'Sat, 01 Jan 2000 00:00:00 GMT'
        });
        return authHeader;
    }
    // **********************
    // * Protected methods
    // **********************
    /**
     * Call a standard delete API endpoint
     * @param id - The ID of the item to be deleted
     * @param secure - Enum indicating whether the API endpoint is secure
     * @returns True if the delete succeeded
     * @async
     */
    _delete(id, secure) {
        return __awaiter(this, void 0, void 0, function* () {
            if ((yield this.validateId(id, 'Error deleting a record. Invalid ID.')) ===
                false) {
                return false;
            }
            const headers = this.getHeader(secure);
            const result = yield this.httpClient
                .delete(UrlUtil.join(this.apiRoot, this._baseEndpoint, id), {
                headers
            })
                .toPromise();
            if (Dto.isError(result.status.code)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return false;
            }
            return true;
        });
    }
    /**
     * Call a non-standard delete API endpoint
     * @param options - The request options
     * @returns True if the delete succeeded
     * @async
     */
    _deleteWithOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url;
            if (options.url) {
                url = options.url;
            }
            else {
                url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);
            }
            if (options.id) {
                url = UrlUtil.join(url, options.id);
            }
            if (options.parameters.hasParameters) {
                url = UrlUtil.join(url, options.parameters.getParamterString());
            }
            const headers = this.getHeader(options.secure);
            const result = yield this.httpClient
                .delete(url, {
                headers
            })
                .toPromise();
            if (Dto.isError(result.status.code, options.suppressedErrors)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return false;
            }
            return true;
        });
    }
    /**
     * Delete all test artifacts
     * @returns True if the delete succeded
     * @async
     */
    _deleteTestArtifacts() {
        return __awaiter(this, void 0, void 0, function* () {
            const options = new Options();
            options.url = UrlUtil.join(this.apiRoot, this.baseEndpoint, 'deletetestartifacts');
            options.secure = Secure.true;
            return yield this._deleteWithOptions(options).catch((err) => __awaiter(this, void 0, void 0, function* () {
                return yield this.handlePromiseError('BaseDataService', '_deleteTestArtifacts', err);
            }));
        });
    }
    /**
     * Call a standard get API endpoint
     * @param id - The ID of the item to get
     * @param secure - Enum indicating whether the API endpoint is secure
     * @returns The item if the get succeeded
     * @async
     */
    _get(id, secure) {
        return __awaiter(this, void 0, void 0, function* () {
            // Validate the passed ID
            this.validateId(id, 'Error getting a record. Invalid ID.');
            // Get the appropriate header object
            const headers = this.getHeader(secure);
            // Make an async call using the httpClient. Expect the result to be an ItemDto object
            const result = yield this.httpClient
                .get(UrlUtil.join(this.apiRoot, this._baseEndpoint, id), {
                headers
            })
                // Convert the result to a promise
                .toPromise();
            // If the returned status code is not a success code then
            if (Dto.isError(result.status.code)) {
                // Open the error dialog
                this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                // Return null
                return null;
            }
            // If the returned data is not an object, return the object with casting it
            if (typeof result.data !== 'object') {
                return result.data;
            }
            // // Cast the object to the appropriate class
            // const data = plainToClassFromExist(this._type, result.data);
            // Return the object
            return result.data;
        });
    }
    // _getObservable
    _getObservable(id, secure) {
        // Validate the passed ID
        this.validateId(id, 'Error getting a record. Invalid ID.');
        // Get the appropriate header object
        const headers = this.getHeader(secure);
        // Make an async call using the httpClient. Expect the result to be an ItemDto object
        return this.httpClient
            .get(UrlUtil.join(this.apiRoot, this._baseEndpoint, id), {
            headers
        })
            .pipe(map(result => {
            return result.data;
        }));
    }
    /**
     * Call a non-standard get API endpoint that returns an observable
     * @param id - The ID of the item to get
     * @param options - The request options
     * @returns The item if the get succeeded (as an observable)
     * @async
     */
    _getObservableWithOptions(options) {
        let url;
        if (options.url) {
            url = options.url;
        }
        else {
            url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);
        }
        if (options.id) {
            url = UrlUtil.join(url, options.id);
        }
        if (options.parameters.hasParameters) {
            url = UrlUtil.join(url, options.parameters.getParamterString());
        }
        const headers = this.getHeader(options.secure);
        return this.httpClient
            .get(url, {
            headers
        })
            .pipe(map(result => {
            return result.data;
        }));
    }
    /**
     * Call a non-standard get API endpoint
     * @param options - The request options
     * @returns The item if the get succeeded
     * @async
     */
    _getWithOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url;
            if (options.url) {
                url = options.url;
            }
            else {
                url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);
            }
            if (options.id) {
                url = UrlUtil.join(url, options.id);
            }
            if (options.parameters.hasParameters) {
                url = UrlUtil.join(url, options.parameters.getParamterString());
                console.log('Cache busting URL:' + url);
            }
            const headers = this.getHeader(options.secure);
            const result = yield this.httpClient
                .get(url, {
                headers
            })
                .toPromise();
            if (Dto.isError(result.status.code, options.suppressedErrors)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            if (result.data === null || result.data === undefined) {
                return null;
            }
            if (typeof result.data !== 'object') {
                return result.data;
            }
            // let data: T;
            // if (options.objectType) {
            //   data = plainToClassFromExist(options.objectType, result.data);
            // } else {
            //   data = plainToClassFromExist(this._type, result.data);
            // }
            return result.data;
        });
    }
    /**
     * Call a standard get many API endpoint
     * @param secure - Enum indicating whether the API endpoint is secure
     * @returns An array of items if the get succeeded
     * @async
     */
    _getMany(secure) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = this.getHeader(secure);
            const result = yield this.httpClient
                .get(UrlUtil.join(this.apiRoot, this._baseEndpoint), {
                headers
            })
                .toPromise();
            if (Dto.isError(result.status.code)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            return result.data;
        });
    }
    /**
     * Call a non-standard get many API endpoint
     * @param options - The request options
     * @returns An array of items if the get succeeded
     * @async
     */
    _getManyWithOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url;
            if (options.url) {
                url = options.url;
            }
            else {
                url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);
            }
            if (options.id) {
                url = UrlUtil.join(url, options.id);
            }
            if (options.parameters.hasParameters) {
                url = UrlUtil.join(url, options.parameters.getParamterString());
            }
            const headers = this.getHeader(options.secure);
            const result = yield this.httpClient
                .get(url, { headers })
                .toPromise();
            if (Dto.isError(result.status.code, options.suppressedErrors)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            return result.data;
        });
    }
    /**
     * Call a standard post API endpoint
     * @param object - The object to post
     * @param secure - Enum indicating whether the API endpoint is secure
     * @param validateId - Boolean indicating whether then object's ID should be validated
     * @returns The posted object
     * @async
     */
    _post(object, secure, validateId = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (validateId) {
                if (!this.validateModelId(object, 'Error posting a record. Invalid model ID.')) {
                    return null;
                }
            }
            const headers = this.getHeader(secure);
            const url = UrlUtil.join(this.apiRoot, this._baseEndpoint);
            let result;
            try {
                result = yield this.httpClient
                    .post(UrlUtil.join(this.apiRoot, this._baseEndpoint), object, {
                    headers
                })
                    .toPromise();
            }
            catch (error) {
                console.log('**********');
                console.log('HTTP Post Error');
                console.log('URL: ' + url);
                console.log(object);
                throw error;
            }
            if (Dto.isError(result.status.code)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            return result.data;
        });
    }
    /**
     * Call a non-standard post API endpoint
     * @param object - The object to post
     * @param options - The request options
     * @returns The posted object
     * @async
     */
    _postWithOptions(object, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options.validateId) {
                if (!this.validateModelId(object, 'Error posting a record. Invalid model ID.')) {
                    return null;
                }
            }
            let url;
            if (options.url) {
                url = options.url;
            }
            else {
                url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);
            }
            if (options.id) {
                url += options.id;
            }
            if (options.parameters.hasParameters) {
                url += options.parameters.getParamterString();
            }
            const headers = this.getHeader(options.secure);
            const result = yield this.httpClient
                .post(url, object, {
                headers
            })
                .toPromise();
            if (Dto.isError(result.status.code, options.suppressedErrors)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            return result.data;
        });
    }
    /**
     * Call a standard put API endpoint
     * @param object - The object to put
     * @param secure - Enum indicating whether the API endpoint is secure
     * @param validateId - Boolean indicating whether then object's ID should be validated
     * @returns The updated object
     * @async
     */
    _put(object, secure, validateId = true) {
        return __awaiter(this, void 0, void 0, function* () {
            if (object && validateId) {
                if (!this.validateModelId(object, 'Error putting a record. Invalid model ID.')) {
                    return null;
                }
            }
            const headers = this.getHeader(secure);
            const result = yield this.httpClient
                .put(UrlUtil.join(this.apiRoot, this._baseEndpoint, object._id), object, {
                headers
            })
                .toPromise();
            if (Dto.isError(result.status.code)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            return result.data;
        });
    }
    /**
     * Call a non-standard put API endpoint
     * @param object - The object to put
     * @param options - The request options
     * @returns The updated object
     * @async
     */
    _putWithOptions(options, object) {
        return __awaiter(this, void 0, void 0, function* () {
            if (object && options.validateId) {
                if (!this.validateModelId(object, 'Error putting a record. Invalid model ID.')) {
                    return null;
                }
            }
            let url;
            if (options.url) {
                url = options.url;
            }
            else {
                url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);
            }
            if (options.id) {
                url = UrlUtil.join(url, options.id);
            }
            if (options.parameters.hasParameters) {
                url = UrlUtil.join(url, options.parameters.getParamterString());
            }
            const headers = this.getHeader(options.secure);
            const result = yield this.httpClient
                .put(url, object, {
                headers
            })
                .toPromise();
            if (Dto.isError(result.status.code, options.suppressedErrors)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            return result.data;
        });
    }
    _searchWithOptions(options) {
        return __awaiter(this, void 0, void 0, function* () {
            let url;
            if (options.url) {
                url = options.url;
            }
            else {
                url = UrlUtil.join(this.apiRoot, this.baseEndpoint, options.url);
            }
            if (options.id) {
                url = UrlUtil.join(url, options.id);
            }
            if (options.parameters.hasParameters) {
                url = UrlUtil.join(url, options.parameters.getParamterString());
                console.log('Cache busting URL:' + url);
            }
            const headers = this.getHeader(options.secure);
            const result = yield this.httpClient
                .get(url, {
                headers
            })
                .toPromise();
            if (SearchResultsDto.isError(result.status.code, options.suppressedErrors)) {
                yield this.errorDialogService.openErrorDialog(result.status.text, result.status.message);
                return null;
            }
            const searchResultsContainer = new SearchResultsContainer(result);
            return searchResultsContainer;
        });
    }
    _uploadFormData(url, data, secure) {
        const headers = this.getHeader(secure);
        return this.httpClient
            .post(url, data, {
            headers,
            reportProgress: true,
            observe: 'events'
        })
            .pipe(map(event => {
            let uploadEvent;
            switch (event.type) {
                case HttpEventType.UploadProgress:
                    const progress = Math.round((100 * event.loaded) / event.total);
                    uploadEvent = new UploadEvent('Progress');
                    uploadEvent.progressPercent = progress;
                    return uploadEvent;
                case HttpEventType.Response:
                    uploadEvent = new UploadEvent('Response', event.body);
                    return uploadEvent;
                default:
                    uploadEvent = new UploadEvent('Error', `Unhandled event: ${event.type}`);
                    return uploadEvent;
            }
        }));
    }
    /**
     * Handle an error for an observable request
     * @param serviceName - The name of the service reporting the error
     * @param result - The return to return
     */
    handleObservableError(serviceName, result = {}) {
        return (error) => {
            console.error(serviceName, error);
            console.error(serviceName + ' error status', error.status);
            return of(result);
        };
    }
    /**
     * Handle an error for a standard promise request
     * @param serviceName - The name of the service reporting the error
     * @param method - The name of the method reporting the error
     * @param error - The error object
     * @async
     */
    handlePromiseError(serviceName, method, error) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Service: ' +
                serviceName +
                ' Method: ' +
                method +
                ' Message: ' +
                error.message);
            yield this.errorDialogService.openErrorDialog('Unhandled Exception', 'An unhandled exception error occurred: ' + error.message);
            return null;
        });
    }
    /**
     * Get the request header
     * @param secure - Enum indicating the type of API endpoing security
     * @returns An HTTP header
     */
    getHeader(secure) {
        switch (secure) {
            case Secure.true:
                return this.authHeader;
            case Secure.api:
                return this.apiHeader;
            case Secure.false:
            default:
                return this.noTokenHeader;
        }
    }
    /**
     * Validate the ID of a model
     * @param model - The model to validate
     * @param message - The message to display if validating fails
     * @returns True if the validation succeeded
     * @async
     */
    validateModelId(model, message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!model._id) {
                yield this.errorDialogService.openErrorDialog('Invalid Model ID', message);
                return false;
            }
            return true;
        });
    }
    /**
     * Validate the ID of a model
     * @param id - The ID to validate
     * @param message - The message to display if validating fails
     * @returns True if the validation succeeded
     * @async
     */
    validateId(id, message) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!id) {
                yield this.errorDialogService.openErrorDialog('Invalid Model ID', message);
                return false;
            }
            return true;
        });
    }
};
BaseDataService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LeathermanAppConfigInjectionToken,] }] },
    { type: ErrorDialogService, decorators: [{ type: Inject, args: [ErrorDialogServiceInjectionToken,] }] },
    { type: Router },
    { type: HttpClient }
];
BaseDataService.ɵprov = i0.ɵɵdefineInjectable({ factory: function BaseDataService_Factory() { return new BaseDataService(i0.ɵɵinject(i1.LeathermanAppConfigInjectionToken), i0.ɵɵinject(i2.ErrorDialogServiceInjectionToken), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.HttpClient)); }, token: BaseDataService, providedIn: "root" });
BaseDataService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __param(0, Inject(LeathermanAppConfigInjectionToken)),
    __param(1, Inject(ErrorDialogServiceInjectionToken))
], BaseDataService);
export { BaseDataService };
//# sourceMappingURL=data:application/json;base64,