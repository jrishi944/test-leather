{"version":3,"file":"leatherman-bootstrap.js","sources":["ng://leatherman-bootstrap/lib/components/base-component/base.component.ts","ng://leatherman-bootstrap/lib/util/pipes/safe-html.pipe.ts","ng://leatherman-bootstrap/lib/config/injection-tokens/leatherman-app-config.injection-token.ts","ng://leatherman-bootstrap/lib/config/injection-tokens/error-dialog-service.injection-token.ts","ng://leatherman-bootstrap/lib/config/injection-tokens/confirm-dialog-service.injection-token.ts","ng://leatherman-bootstrap/lib/angular.module.ts","ng://leatherman-bootstrap/lib/dialogs/error/error-dialog/error-dialog.component.ts","ng://leatherman-bootstrap/lib/models/dialog/dialog-result.model.ts","ng://leatherman-bootstrap/lib/enums/dialog-button.enum.ts","ng://leatherman-bootstrap/lib/dialogs/confirm/confirm-dialog/confirm-dialog.component.ts","ng://leatherman-bootstrap/lib/leatherman.module.ts","ng://leatherman-bootstrap/lib/constants/state-abbreviations.const.ts","ng://leatherman-bootstrap/lib/dialogs/confirm/confirm-dialog/_models/confirm-dialog-data.model.ts","ng://leatherman-bootstrap/lib/dialogs/confirm/confirm-dialog.service.ts","ng://leatherman-bootstrap/lib/dialogs/confirm/_mock/confirm-dialog.mock.service.ts","ng://leatherman-bootstrap/lib/dialogs/error/error-dialog/_models/error-dialog-data.model.ts","ng://leatherman-bootstrap/lib/dialogs/error/error-dialog.service.ts","ng://leatherman-bootstrap/lib/dialogs/error/_mock/error-dialog.mock.service.ts","ng://leatherman-bootstrap/lib/enums/secure.enum.ts","ng://leatherman-bootstrap/lib/enums/status.enum.ts","ng://leatherman-bootstrap/lib/enums/test-artifact.enum.ts","ng://leatherman-bootstrap/lib/models/args/get-options.model.ts","ng://leatherman-bootstrap/lib/models/authentication/authentication-details.model.ts","ng://leatherman-bootstrap/lib/models/authentication/_submodels/authentication-token-expiry.mode.ts","ng://leatherman-bootstrap/lib/models/authentication/login-request.model.ts","ng://leatherman-bootstrap/lib/models/base/base.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-facet-field.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-facet-filter-properties.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-facet-filter.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-facet-options.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-facet-range-filter-properties.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-facet-range-filter.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-facet-range-query.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-match-filter.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-range-filter.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-options.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-result-facet-item.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-result-facet.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-result-meta.model.ts","ng://leatherman-bootstrap/lib/models/dto/search/search-result-request.model.ts","ng://leatherman-bootstrap/lib/models/dto/dto-status-container.model.ts","ng://leatherman-bootstrap/lib/models/dto/dto.model.ts","ng://leatherman-bootstrap/lib/models/dto/array-dto.model.ts","ng://leatherman-bootstrap/lib/models/dto/item-dto.model.ts","ng://leatherman-bootstrap/lib/models/dto/search-results-container.model.ts","ng://leatherman-bootstrap/lib/models/dto/search-results-dto.model.ts","ng://leatherman-bootstrap/lib/models/error/client-error-report.model.ts","ng://leatherman-bootstrap/lib/models/events/upload-event.model.ts","ng://leatherman-bootstrap/lib/models/base-user/base-new-user-request.model.ts","ng://leatherman-bootstrap/lib/models/base-user/base-password-reset-request.model.ts","ng://leatherman-bootstrap/lib/models/base-user/base-user.model.ts","ng://leatherman-bootstrap/lib/models/base-user/validate-password-reset-token-response.model.ts","ng://leatherman-bootstrap/lib/models/base-user/validate-verify-email-token-response.model.ts","ng://leatherman-bootstrap/lib/services/base-data/_models/parameter.model.ts","ng://leatherman-bootstrap/lib/services/base-data/_models/parameters.model.ts","ng://leatherman-bootstrap/lib/services/base-data/_models/base-data-options.model.ts","ng://leatherman-bootstrap/lib/util/url/url.util.ts","ng://leatherman-bootstrap/lib/services/base-data/base-data.service.ts","ng://leatherman-bootstrap/lib/services/authentication/authentication-data.service.ts","ng://leatherman-bootstrap/lib/services/authentication/authentication.service.ts","ng://leatherman-bootstrap/lib/services/auth-guard/admin-auth-guard.service.ts","ng://leatherman-bootstrap/lib/services/auth-guard/user-auth-guard.service.ts","ng://leatherman-bootstrap/lib/services/base-component-ui/base-component-ui.service.ts","ng://leatherman-bootstrap/lib/services/base-service/base.service.ts","ng://leatherman-bootstrap/lib/services/error/custom-error-handler.server.ts","ng://leatherman-bootstrap/lib/services/route-parts/route-parts.service.ts","ng://leatherman-bootstrap/lib/services/base-user/base-user-data.service.ts","ng://leatherman-bootstrap/lib/models/base-user/password-reset.model.ts","ng://leatherman-bootstrap/lib/services/base-user/base-user.service.ts","ng://leatherman-bootstrap/lib/util/collection/_enums/filter-case.enum.ts","ng://leatherman-bootstrap/lib/util/collection/_enums/filter-scope.enum.ts","ng://leatherman-bootstrap/lib/util/collection/_enums/sort.enum.ts","ng://leatherman-bootstrap/lib/util/collection/_enums/unique-mode.enum.ts","ng://leatherman-bootstrap/lib/util/collection/_enums/unique.enum.ts","ng://leatherman-bootstrap/lib/util/collection/_models/filter-options.model.ts","ng://leatherman-bootstrap/lib/util/collection/_models/sort-option.model.ts","ng://leatherman-bootstrap/lib/util/regex/_constants/strong-password.regex.ts","ng://leatherman-bootstrap/lib/util/regex/_constants/iso_date.regex.ts","ng://leatherman-bootstrap/lib/util/regex/_constants/latitude-regex.const.ts","ng://leatherman-bootstrap/lib/util/regex/_constants/longitude-regex.const.ts","ng://leatherman-bootstrap/lib/util/regex/_constants/phone-number-regex.const.ts","ng://leatherman-bootstrap/lib/util/regex/_constants/url-regex.const.ts","ng://leatherman-bootstrap/lib/util/regex/_constants/zip-code-regex.const.ts","ng://leatherman-bootstrap/lib/util/regex/regex.util.ts","ng://leatherman-bootstrap/lib/util/collection/collection.util.ts","ng://leatherman-bootstrap/lib/util/object-copy/object-copy.util.ts","ng://leatherman-bootstrap/lib/util/mixins/mixin.util.ts","ng://leatherman-bootstrap/lib/util/paginator/paginator.util.ts","ng://leatherman-bootstrap/lib/util/short-id/short-id.util.ts","ng://leatherman-bootstrap/lib/util/test/md-dialog/mat-dialog.mock.ts","ng://leatherman-bootstrap/lib/util/validators/strong-password.validator.ts","ng://leatherman-bootstrap/public-api.ts","ng://leatherman-bootstrap/leatherman-bootstrap.ts"],"sourcesContent":["import { Component, OnDestroy } from '@angular/core';\nimport { takeUntil, debounceTime, distinctUntilChanged } from 'rxjs/operators';\nimport { AbstractControl } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\n/**\n * Base Leatherman component\n */\n@Component({\n  selector: 'lm-base-component',\n  template: 'No UI Here'\n})\nexport class BaseComponent implements OnDestroy {\n  /** Boolean indicating whether the component has been initialized */\n  public isInitialized = false;\n\n  /** Boolean indicating whether the component's data is loading */\n  public isLoading = false;\n\n  /** An RXJS subject used to destroy subscriptions when the component is destroyed */\n  public destroySubject$: Subject<void> = new Subject();\n\n  // constructor\n  constructor() { }\n\n  /**\n   * Trigger the destroy subject  when the component is destroyed\n   */\n  public ngOnDestroy() {\n    this.destroySubject$.next();\n  }\n\n  protected decodeURIComponent(uriComponent: string): string {\n    if (!uriComponent) {\n      return uriComponent;\n    }\n    return decodeURIComponent(uriComponent);\n  }\n\n  protected encodeURIComponent(uriComponent: string): string {\n    if (!uriComponent) {\n      return uriComponent;\n    }\n    return encodeURIComponent(uriComponent);\n  }\n\n  /**\n   * Subscribe to a subject\n   * @param subject$ - The subject to subscribe to\n   * @param callback - The callback method to call when the subject is triggered\n   * @returns Void\n   */\n  protected subscribeSubject<T>(\n    subject$: Subject<T>,\n    callback: (result: any) => void\n  ) {\n    subject$.pipe(takeUntil(this.destroySubject$)).subscribe(async result => {\n      await callback(result);\n    });\n  }\n\n  /**\n   * Subscribe to a subject synchronously\n   * @param subject$ - The subject to subscribe to\n   * @param callback - The callback method to call when the subject is triggered\n   * @returns Void\n   */\n  protected subscribeSubjectSync<T>(\n    subject$: Subject<T>,\n    callback: (result: any) => void\n  ) {\n    subject$.pipe(takeUntil(this.destroySubject$)).subscribe(result => {\n      callback(result);\n    });\n  }\n\n  /**\n   * Subscribe to value change events for a control\n   * @param control - The control to listen to\n   * @param callback - The functiion to call when the control value changes\n   */\n  protected subscribeValueChanges(\n    control: AbstractControl,\n    callback: (result: any) => void\n  ) {\n    control.valueChanges\n      .pipe(\n        debounceTime(400),\n        distinctUntilChanged()\n      )\n      .pipe(takeUntil(this.destroySubject$))\n      .subscribe(async result => {\n        await callback(result);\n      });\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n/**\n * A pipe to transform HTML to safe HTML\n */\n@Pipe({\n  name: 'safeHtml'\n})\nexport class SafeHtmlPipe implements PipeTransform {\n  /**\n   * Constructor\n   * @param sanitizer - A reference to the DomSanitizer service\n   */\n  constructor(private sanitizer: DomSanitizer) {}\n\n  /**\n   * Transform the passed HTML\n   * @param html - The HTML to transform\n   * @returns The transformed HTML\n   */\n  public transform(html) {\n    const sanitizedHtml = this.sanitizer.bypassSecurityTrustHtml(html);\n    return sanitizedHtml;\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { ILeathermanAppConfig } from '../app.config';\n\nexport const LeathermanAppConfigInjectionToken = new InjectionToken<\n  ILeathermanAppConfig\n>('LeathermanAppConfig');\n","import { InjectionToken } from '@angular/core';\nimport { IErrorDialogService } from '../../dialogs/error/_interfaces/error-dialog-service.interface';\n\nexport const ErrorDialogServiceInjectionToken = new InjectionToken<\n  IErrorDialogService\n>('ErrorDialogService');\n","import { InjectionToken } from '@angular/core';\nimport { IConfirmDialogService } from '../../dialogs/confirm/_interfaces/confirm-dialog-service.interface';\n\nexport const ConfirmDialogServiceInjectionToken = new InjectionToken<\n  IConfirmDialogService\n>('ConfirmDialogService');\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n  ],\n  exports: [\n    ReactiveFormsModule,\n    CommonModule,\n    RouterModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n  ]\n})\n\n/**\n * A module importing and exporting common Angular modules\n */\nexport class AngularModule {}\n","import { Component, OnInit, Inject, Input } from '@angular/core';\nimport { ErrorDialogData } from './_models/error-dialog-data.model';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A dialog component to display an error message\n */\n@Component({\n  selector: 'lm-error-dialog',\n  templateUrl: './error-dialog.component.html',\n  styleUrls: ['./error-dialog.component.scss']\n})\nexport class ErrorDialogComponent {\n  /** The title of the error dialog */\n  public title: string;\n\n  /** The dialog error message */\n  public message: string;\n\n  @Input() public data: ErrorDialogData\n  /**\n   * @param activeModal - A reference to the dialog\n   */\n  constructor(\n    public activeModal: NgbActiveModal,\n  ) {\n  }\n\n  ngOnInit() {\n    this.title = this.data.title;\n    this.message = this.data.message;\n  }\n\n  /**\n   * Method called when the dialog is cancelled\n   */\n  onClose() {\n    this.activeModal.close();\n  }\n}\n","import { DialogButton } from '../../enums/dialog-button.enum';\n\n/**\n * A class to store the results from a dialog\n */\nexport class DialogResult<T> {\n  /**\n   * @param button - The clicked button\n   * @param data - The data returned by the dialog\n   * @param data2 - Additional data returned by the diaoig\n   * @param data3 - Additional data returned by the dialog\n   */\n  constructor(\n    public button: DialogButton,\n    public data?: T,\n    public data2?: any,\n    public data3?: any\n  ) {}\n}\n","/**\n * Enumeration representing return values from dialogs\n */\nexport enum DialogButton {\n  /** An error occurred in the dialog */\n  Error = -1,\n\n  /** The user clicked the OK button */\n  OK = 0,\n\n  /** The user clicked the cancel button */\n  Cancel = 1\n}\n","import { Component, OnInit, Inject, Input } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConfirmDialogData } from './_models/confirm-dialog-data.model';\nimport { DialogResult } from '../../../models/dialog/dialog-result.model';\nimport { DialogButton } from '../../../enums/dialog-button.enum';\n/**\n * A dialog component to prompt the user for a YES/NO answer\n */\n@Component({\n  selector: 'lm-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent implements OnInit {\n  @Input() public dialogData: ConfirmDialogData\n  constructor(\n    public activeModal: NgbActiveModal\n  ) {\n  }\n\n  ngOnInit() {\n  }\n\n  public onCancel() {\n    const dialogResult = new DialogResult(DialogButton.Cancel);\n    this.activeModal.close(dialogResult);\n  }\n\n  public onConfirm(): void {\n    const dialogResult = new DialogResult(DialogButton.OK);\n    this.activeModal.close(dialogResult);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { BaseComponent } from './components/base-component/base.component';\nimport { SafeHtmlPipe } from './util/pipes/safe-html.pipe';\nimport { ILeathermanAppConfig } from './config/app.config';\nimport { LeathermanAppConfigInjectionToken } from './config/injection-tokens/leatherman-app-config.injection-token';\nimport { ErrorDialogServiceInjectionToken } from './config/injection-tokens/error-dialog-service.injection-token';\nimport { ConfirmDialogServiceInjectionToken } from './config/injection-tokens/confirm-dialog-service.injection-token';\nimport { AngularModule } from './angular.module';\nimport { ErrorDialogComponent } from './dialogs/error/error-dialog/error-dialog.component';\nimport { ConfirmDialogComponent } from './dialogs/confirm/confirm-dialog/confirm-dialog.component';\n\n@NgModule({\n  imports: [AngularModule],\n  declarations: [\n    SafeHtmlPipe,\n    BaseComponent,\n    ErrorDialogComponent,\n    ConfirmDialogComponent,\n  ],\n  exports: [\n    SafeHtmlPipe,\n    BaseComponent,\n    ErrorDialogComponent,\n    ConfirmDialogComponent,\n  ]\n})\n\n/**\n * A module declaring and exporting Leatherman components\n */\nexport class LeathermanModule {\n  static forRoot(\n    appConfig: ILeathermanAppConfig,\n    errorDialogService: any,\n    confirmDialogService: any\n  ): ModuleWithProviders<LeathermanModule> {\n    return {\n      ngModule: LeathermanModule,\n      providers: [\n        {\n          provide: LeathermanAppConfigInjectionToken,\n          useValue: appConfig\n        },\n        {\n          provide: ErrorDialogServiceInjectionToken,\n          useClass: errorDialogService\n        },\n        {\n          provide: ConfirmDialogServiceInjectionToken,\n          useClass: confirmDialogService\n        }\n      ]\n    };\n  }\n}\n","/**\n * Array of state abbrevations\n */\nexport const STATE_ABBREVIATIONS: Array<string> = [\n  'AK',\n  'AL',\n  'AR',\n  'AS',\n  'AZ',\n  'CA',\n  'CO',\n  'CT',\n  'DC',\n  'DE',\n  'FL',\n  'GA',\n  'GU',\n  'HI',\n  'IA',\n  'ID',\n  'IL',\n  'IN',\n  'KS',\n  'KY',\n  'LA',\n  'MA',\n  'MD',\n  'ME',\n  'MI',\n  'MN',\n  'MO',\n  'MS',\n  'MT',\n  'NC',\n  'ND',\n  'NE',\n  'NH',\n  'NJ',\n  'NM',\n  'NV',\n  'NY',\n  'OH',\n  'OK',\n  'OR',\n  'PA',\n  'PR',\n  'RI',\n  'SC',\n  'SD',\n  'TN',\n  'TX',\n  'UT',\n  'VA',\n  'VI',\n  'VT',\n  'WA',\n  'WI',\n  'WV',\n  'WY'\n];\n","/**\n * A class to store confirm dialog data\n */\nexport class ConfirmDialogData {\n  /**\n   * @param title - The title of the confirm dialog\n   * @param message - The message to display in the confirm dialog\n   */\n  constructor(public title: string, public message: string) {}\n}\n","import { Injectable } from \"@angular/core\";\nimport { NgbModal } from \"@ng-bootstrap/ng-bootstrap\";\nimport { ConfirmDialogComponent } from \"./confirm-dialog/confirm-dialog.component\";\nimport { ConfirmDialogData } from \"./confirm-dialog/_models/confirm-dialog-data.model\";\nimport { DialogResult } from \"../../models/dialog/dialog-result.model\";\nimport { IConfirmDialogService } from \"./_interfaces/confirm-dialog-service.interface\";\nimport { DialogButton } from \"../../enums/dialog-button.enum\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ConfirmDialogService implements IConfirmDialogService {\n  constructor(public dialog: NgbModal) {}\n\n  public async openConfirmDialog(\n    title: string,\n    message: string\n  ): Promise<DialogResult<DialogButton>> {\n    const confirmDialogData = new ConfirmDialogData(title, message);\n    const dialogRef = this.dialog.open(ConfirmDialogComponent, {\n      backdrop: \"static\",\n      keyboard: false,\n    });\n    dialogRef.componentInstance.dialogData = confirmDialogData;\n    const result: DialogResult<DialogButton> = await dialogRef.result;\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ConfirmDialogService } from '../confirm-dialog.service';\nimport { DialogResult } from '../../../models/dialog/dialog-result.model';\nimport { DialogButton } from '../../../enums/dialog-button.enum';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n * A service to mock the confirm dialog service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockConfirmDialogService extends ConfirmDialogService {\n  /**\n   * @param dialog - A reference to the NgbModal service\n   */\n  constructor(dialog: NgbModal) { \n    super(dialog);\n  }\n\n  /**\n   * Display a confirm dialog\n   * @param title - The title of the confirm dialog\n   * @param message - The message to display in the confirm dialog\n   */\n  public async openConfirmDialog(\n    title: string,\n    message: string\n  ): Promise<DialogResult<DialogButton>> {\n    console.log('Using mock confirm dialog service.');\n    return Promise.resolve(new DialogResult<DialogButton>(DialogButton.OK));\n  }\n}\n","/**\n * A class to store error/confirm dialog data\n */\nexport class ErrorDialogData {\n  /**\n   * @param title - The title of the error dialog\n   * @param message - The message to display in the error dialog\n   */\n  constructor(public title: string, public message: string) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ErrorDialogComponent } from './error-dialog/error-dialog.component';\nimport { ErrorDialogData } from './error-dialog/_models/error-dialog-data.model';\nimport { DialogResult } from '../../models/dialog/dialog-result.model';\nimport { DialogButton } from '../../enums/dialog-button.enum';\nimport { IErrorDialogService } from './_interfaces/error-dialog-service.interface';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n/**\n *  A service to manage and display error dialogs\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorDialogService implements IErrorDialogService {\n  constructor(public dialog: NgbModal) { }\n\n  /**\n   * Open an error dialog\n   * @param title - The title of the error dialog\n   * @param message - The message to display to the user\n   */\n  public async openErrorDialog(\n    title: string,\n    message: string\n  ): Promise<DialogResult<null>> {\n    const dialogData = new ErrorDialogData(title, message);\n\n    const dialogRef = this.dialog.open(ErrorDialogComponent);\n    dialogRef.componentInstance.data = dialogData;\n    \n    return new DialogResult(DialogButton.OK);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ErrorDialogService } from '../error-dialog.service';\nimport { DialogResult } from '../../../models/dialog/dialog-result.model';\nimport { DialogButton } from '../../../enums/dialog-button.enum';\n\n/**\n * A service to mock the confirm dialog service\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MockErrorDialogService extends ErrorDialogService {\n  /**\n   * Open an error dialog\n   * @param title - The title of the error dialog\n   * @param message - The message to display to the user\n   */\n  public async openErrorDialog(\n    title: string,\n    message: string\n  ): Promise<DialogResult<null>> {\n    console.log('Using mock error dialog service.');\n    console.log('Title: ' + title);\n    console.log('Title: ' + message);\n    return Promise.resolve(new DialogResult<null>(DialogButton.OK));\n  }\n}\n","/**\n * Enumeration representing security options for an API endpoint\n */\nexport enum Secure {\n  /** The endpoint request a JWT token */\n  true,\n\n  /** The endpoint is not secure */\n  false,\n\n  /** The endpoint is secured with an API key */\n  api\n}\n","/**\n * Enumeration representing controller result statuses\n */\nexport enum Status {\n  /** The request succeeded */\n  OK = 200,\n\n  /** The request succeeded and a record was created */\n  Created = 201,\n\n  /** The request succeeded but there was not data to return */\n  NoData = 204,\n\n  /** The request did not result in any data being changed */\n  NotModifed = 304,\n\n  /** The request was invalid */\n  BadRequest = 400,\n\n  /** The user is not authorized to make the request */\n  NotAuthorized = 401,\n\n  /** ;-) */\n  ImATeapot = 418,\n\n  /** A server error occurred */\n  Error = 500\n}\n\nexport enum SessionState {\n  LocalStorage = 'local-storage',\n  SessionStorage = 'session-storage'\n}\n","/**\n * Enumeration representing test artifact states\n */\nexport enum TestArtifact {\n  /** A test artifact */\n  true,\n\n  /** Not a test artifact */\n  false\n}\n","import { Request } from 'express';\n\nexport class GetOptions {\n  public query = '';\n  public filter = '';\n  public skip = 0;\n  public take = 10;\n  public sort = '';\n  public sortColumn = '';\n  public sortAscending = true;\n\n  constructor(currentPage: number = 1, pageSize: number = 10) {\n    this.take = pageSize;\n    this.skip = (currentPage - 1) * pageSize;\n  }\n\n  public static calculatePageCount(rowCount: number, pageSize: number) {\n    const pageCount = Math.floor((rowCount - 1) / pageSize) + 1;\n    return pageCount;\n  }\n\n  public setSort(field: string, ascending: boolean = true) {\n    this.sortColumn = field;\n    this.sortAscending = ascending;\n    if (ascending === true) {\n      this.sort = field + ':ASC';\n    } else {\n      this.sort = field + ':DESC';\n    }\n  }\n}\n","import { AuthenticationTokenExpiry } from './_submodels/authentication-token-expiry.mode';\n\nexport class AuthenticationDetails {\n  public authenticated: boolean;\n  public emailVerified: boolean;\n  public userId: string;\n  public roles: string[] = [];\n  public token: string;\n  public expiry: AuthenticationTokenExpiry;\n}\n","export class AuthenticationTokenExpiry {\n  public expiryDate: Date;\n  public expirySeconds: number;\n}\n","/**\n * A class to store login request data\n */\nexport class LoginRequest {\n  constructor(\n    /** The user's email address */\n    public email: string,\n    /** The user's password */\n    public password: string\n  ) {}\n}\n","import { TestArtifact } from '../../enums/test-artifact.enum';\n\n/**\n * The base model class\n */\nexport class BaseModel {\n  /** The ID of the model */\n  public _id: string;\n\n  /** The date the model was creatd */\n  public dateCreated: Date;\n\n  /** The date the model was last modified */\n  public dateModified: Date;\n\n  /** Boolean indicating whether the model is a test artifact */\n  public testArtifact?: boolean;\n\n  /**\n   * @param testArtifact - Enum indicating whether the model is a test artifact\n   */\n\n  constructor(testArtifact?: TestArtifact) {\n    if (testArtifact === TestArtifact.true) {\n      this.testArtifact = true;\n    }\n  }\n}\n","export class SearchFacetField {\n  public excludedFacet: boolean;\n\n  constructor(\n    public field: string,\n    public label: string,\n    public token: string,\n    public isString: boolean,\n    public facetLabelCallback: (\n      field: string,\n      label: string,\n      token: string,\n      value: string\n    ) => any\n  ) {}\n}\n","export class SearchFacetFilterProperties {\n  constructor(\n    public field: string,\n    public label: string,\n    public isString: boolean\n  ) {}\n}\n","export class SearchFacetFilter {\n  public token: string;\n  public value: string;\n  public label: string;\n  public query: string;\n  public field: string;\n  public excludedFacet: boolean;\n  public isString: boolean;\n\n  constructor() {\n    this.token = '';\n    this.value = '';\n    this.label = '';\n    this.query = '';\n    this.field = '';\n    this.excludedFacet = false;\n    this.isString = false;\n  }\n}\n","import { SearchFacetField } from './search-facet-field.model';\nimport { SearchFacetRangeQuery } from './search-facet-range-query.model';\n\nexport class SearchFacetOptions {\n  fields: SearchFacetField[] = [];\n  rangeQueries: SearchFacetRangeQuery[] = [];\n  limit?: number;\n  minCount?: number;\n\n  public getRangeQuery(query: string): SearchFacetRangeQuery | null {\n    const cleanedQuery = query.replace(/{[^}]+}/i, '').trim();\n    for (const rangeQuery of this.rangeQueries) {\n      if (rangeQuery.query === cleanedQuery) {\n        return rangeQuery;\n      }\n    }\n    return null;\n  }\n}\n","export class SearchFacetRangeFilterProperties {\n  constructor(\n    public field: string,\n    public label: string,\n    public fromValue: string,\n    public toValue: string,\n    public query: string,\n    public value: string\n  ) {}\n}\n","export class SearchFacetRangeFilter {\n  public token: string;\n  public fromValue: string;\n  public toValue: string;\n  public label: string;\n  public query: string;\n  public field: string;\n  public value: string;\n  public excludedFacet: boolean;\n\n  constructor() {\n    this.token = '';\n    this.fromValue = '';\n    this.toValue = '';\n    this.label = '';\n    this.query = '';\n    this.field = '';\n    this.value = '';\n    this.excludedFacet = false;\n  }\n}\n","export class SearchFacetRangeQuery {\n  public excludedFacet: boolean;\n  public query: string;\n\n  constructor(\n    public field: string,\n    public fromValue: string,\n    public toValue: string,\n    public facetLabel: string,\n    public label: string,\n    public value: string,\n    public token: string\n  ) {\n    this.query = field + ':[' + fromValue + ' TO ' + toValue + ']';\n  }\n}\n","export class SearchMatchFilter {\n  public field: string;\n  public value: string;\n}\n","export class SearchRangeFilter {\n  public field: string;\n  public start: string;\n  public end: string;\n  public query: string;\n}\n","import { SearchFacetOptions } from './search-facet-options.model';\nimport { SearchFacetFilter } from './search-facet-filter.model';\nimport { SearchFacetRangeFilter } from './search-facet-range-filter.model';\nimport { SearchMatchFilter } from './search-match-filter.model';\nimport { SearchRangeFilter } from './search-range-filter.model';\n\nexport class SearchOptions {\n  public q: string;\n  public source: string;\n  public start: number;\n  public rows: number;\n  public facetOptions: SearchFacetOptions;\n  public facetFilters: SearchFacetFilter[] = [];\n  public facetRangeFilters: SearchFacetRangeFilter[] = [];\n  public otherFilters: SearchMatchFilter[] = [];\n\n  public getMatchFilters(): SearchMatchFilter[] {\n    const matchFilters: SearchMatchFilter[] = [];\n    for (const facetFilter of this.facetFilters) {\n      const matchFilter = new SearchMatchFilter();\n      if (facetFilter.excludedFacet) {\n        matchFilter.field =\n          '{!tag=' + facetFilter.token + '}' + facetFilter.field;\n      } else {\n        matchFilter.field = facetFilter.field;\n      }\n      if (facetFilter.isString === true) {\n        matchFilter.value = '\"' + this.urlDecode(facetFilter.value) + '\"';\n      } else {\n        matchFilter.value = this.urlDecode(facetFilter.value);\n      }\n      matchFilters.push(matchFilter);\n    }\n    for (const otherFilter of this.otherFilters) {\n      matchFilters.push(otherFilter);\n    }\n    return matchFilters;\n  }\n\n  public getRangeFilters(): SearchRangeFilter[] {\n    const matchFilters: SearchRangeFilter[] = [];\n    for (const facetFilter of this.facetRangeFilters) {\n      const rangeFilter = new SearchRangeFilter();\n      if (facetFilter.excludedFacet) {\n        rangeFilter.field =\n          '{!tag=' + facetFilter.token + '}' + facetFilter.field;\n      } else {\n        rangeFilter.field = facetFilter.field;\n      }\n      rangeFilter.query = facetFilter.query;\n      rangeFilter.start = this.urlDecode(facetFilter.fromValue);\n      rangeFilter.end = this.urlDecode(facetFilter.toValue);\n      matchFilters.push(rangeFilter);\n    }\n    return matchFilters;\n  }\n\n  private urlDecode(text: string): string {\n    const decodedText = decodeURIComponent(text);\n    return decodedText;\n  }\n}\n","import { SearchFacetFilter } from './search-facet-filter.model';\nimport { SearchFacetRangeFilter } from './search-facet-range-filter.model';\n\nexport class SearchResultFacetItem {\n  public token: string;\n  public value: string;\n  public label: string;\n  public count: number;\n  public query: string;\n  public active: boolean;\n\n  constructor() {\n    this.label = '';\n    this.count = 0;\n    this.query = '';\n    this.active = false;\n  }\n\n  public createQuery(\n    q: string,\n    facetFilters: SearchFacetFilter[],\n    rangeQueries: SearchFacetRangeFilter[]\n  ) {\n    let queryString = '';\n    queryString = this.appendQueryString(queryString, 'f=');\n\n    let activeFilter: SearchFacetFilter | null = null;\n    let foundToken = false;\n\n    for (const facetFilter of facetFilters) {\n      if (\n        facetFilter.token === this.token &&\n        facetFilter.value === this.value\n      ) {\n        activeFilter = facetFilter;\n        foundToken = true;\n        this.active = true;\n        continue;\n      } else if (facetFilter.token === this.token) {\n        continue;\n      }\n\n      queryString +=\n        facetFilter.token + ':' + this.urlEncode(facetFilter.value) + ';';\n    }\n\n    let activeRangeQuery: SearchFacetRangeFilter | null = null;\n    for (const rangeQuery of rangeQueries) {\n      if (rangeQuery.token === this.token && rangeQuery.value === this.value) {\n        activeRangeQuery = rangeQuery;\n        foundToken = true;\n        this.active = true;\n        continue;\n      } else if (rangeQuery.token === this.token) {\n        continue;\n      }\n\n      queryString +=\n        rangeQuery.token + ':' + this.urlEncode(rangeQuery.value) + ';';\n    }\n\n    if (foundToken === false) {\n      queryString += this.token + ':' + this.urlEncode(this.value);\n    }\n\n    if (queryString.endsWith(';')) {\n      queryString = queryString.substr(0, queryString.length - 1);\n    }\n\n    if (queryString === 'f=') {\n      queryString = '';\n    }\n\n    if (activeFilter) {\n      activeFilter.query = queryString;\n      this.active = true;\n    }\n\n    if (activeRangeQuery) {\n      activeRangeQuery.query = queryString;\n      this.active = true;\n    }\n\n    this.query = queryString;\n  }\n\n  private appendQueryString(queryString: string, appendString: string) {\n    let appendedQueryString: string;\n\n    if (!queryString) {\n      appendedQueryString = '';\n    } else {\n      appendedQueryString = queryString + '&';\n    }\n\n    appendedQueryString += appendString;\n\n    return appendedQueryString;\n  }\n\n  private urlEncode(text: string): string {\n    const encodedText = encodeURIComponent(text);\n    return encodedText;\n  }\n}\n","import { SearchResultFacetItem } from './search-result-facet-item.model';\nimport { SearchFacetFilter } from './search-facet-filter.model';\nimport { SearchFacetRangeFilter } from './search-facet-range-filter.model';\n\nexport class SearchResultFacet {\n  public items: SearchResultFacetItem[];\n\n  constructor(public field: string, public label: string) {\n    this.items = [];\n  }\n\n  public createQuery(\n    q: string,\n    facetFilters: SearchFacetFilter[],\n    rangeQueries: SearchFacetRangeFilter[]\n  ) {\n    for (const item of this.items) {\n      item.createQuery(q, facetFilters, rangeQueries);\n    }\n  }\n}\n","export class SearchResultMeta {\n  public qTime: number;\n  public resultCount: number;\n  public numFound: number;\n  public start: number;\n\n  constructor(solrResults: any) {\n    this.qTime = solrResults.responseHeader.QTime;\n    this.resultCount = solrResults.response.docs.length;\n    this.numFound = solrResults.response.numFound;\n    this.start = solrResults.response.start;\n  }\n}\n","import { SearchFacetOptions } from './search-facet-options.model';\nimport { SearchFacetFilter } from './search-facet-filter.model';\nimport { SearchFacetRangeFilter } from './search-facet-range-filter.model';\nimport { SearchOptions } from './search-options.model';\n\nexport class SearchResultRequest {\n  public q: string;\n  public facetOptions: SearchFacetOptions;\n  public facetFilters: SearchFacetFilter[];\n  public facetRangeFilters: SearchFacetRangeFilter[];\n  public start: number;\n  public rows: number;\n\n  constructor(solrResults: any, options: SearchOptions) {\n    this.q = options.q;\n    this.facetOptions = options.facetOptions;\n    this.facetFilters = options.facetFilters;\n    this.facetRangeFilters = options.facetRangeFilters;\n\n    this.start = solrResults.responseHeader.params.start;\n    this.rows = solrResults.responseHeader.params.rows;\n  }\n}\n","import { Status } from '../../enums/status.enum';\n\n/**\n * A container to store DTO status data\n */\nexport class DtoStatusContainer {\n  /** A get accessor for the DTO's status text */\n  public get text(): string {\n    switch (this.code) {\n      case Status.OK:\n        return 'OK';\n      case Status.Created:\n        return 'Created';\n      case Status.NoData:\n        return 'No Data';\n      case Status.NotModifed:\n        return 'No Modified';\n      case Status.BadRequest:\n        return 'Bad Request';\n      case Status.NotAuthorized:\n        return 'Not Athorized';\n      case Status.ImATeapot:\n        // tslint:disable-next-line:quotemark\n        return \"I'm a Teapot\";\n      case Status.Error:\n        return 'Error';\n      default:\n        return 'Unknown';\n    }\n  }\n\n  /**\n   * The DTO's message text\n   */\n  public message?: string;\n\n  /**\n   * @param code - The DTO's status code\n   */\n  constructor(public code: Status = Status.OK) {}\n\n  /**\n   * Determine whether the status is an error code\n   */\n  public isError(): boolean {\n    if (\n      this.code === Status.OK ||\n      this.code === Status.NoData ||\n      this.code === Status.Created ||\n      this.code === Status.NotModifed\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Determine whether the status is not an error code\n   */\n  public isNotError(): boolean {\n    if (\n      this.code === Status.OK ||\n      this.code === Status.NoData ||\n      this.code === Status.Created ||\n      this.code === Status.NotModifed\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { DtoStatusContainer } from './dto-status-container.model';\nimport { Status } from '../../enums/status.enum';\n\n/**\n * A data transfer object class\n */\nexport class Dto {\n  /** A container object for the DTO status */\n  public status: DtoStatusContainer;\n\n  /**\n   * @param code = The status code\n   */\n  constructor(code: Status = Status.OK) {\n    this.status = new DtoStatusContainer(code);\n  }\n\n  /**\n   * Determine whether the passed status code is an error\n   * @param code - The status code\n   * @param suppressErrors  - A list of error codes to suppress (i.e. not treat as errors)\n   * @returns True if the status code is an error code\n   */\n  static isError(code: Status, suppressErrors?: Status[]): boolean {\n    if (suppressErrors && suppressErrors.findIndex(c => c === code) >= 0) {\n      return false;\n    }\n    if (\n      code === Status.OK ||\n      code === Status.NoData ||\n      code === Status.Created ||\n      code === Status.NotModifed\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Determine whether the passed status code is not an error\n   * @param code - The status code\n   * @returns True if the status code is not an error code\n   */\n  static isNotError(code: Status): boolean {\n    if (\n      code === Status.OK ||\n      code === Status.NoData ||\n      code === Status.Created ||\n      code === Status.NotModifed\n    ) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { Dto } from './dto.model';\nimport { Status } from '../../enums/status.enum';\n\n/**\n * A DTO class to use if a controller returns an array of items\n */\nexport class ArrayDto<T> extends Dto {\n  /**\n   * @param code - The DTO's status code\n   * @param data - The DTO's data (an array of objects)\n   */\n  constructor(code: Status, public data: T[]) {\n    super(code);\n  }\n}\n","import { Dto } from './dto.model';\nimport { Status } from '../../enums/status.enum';\n\n/**\n * A DTO class to use if a controller returns a single item\n */\nexport class ItemDto<T> extends Dto {\n  /**\n   * @param code - The DTO's status code\n   * @param data - The DTO's data\n   */\n  constructor(code: Status, public data: T) {\n    super(code);\n  }\n}\n","import { SearchResultMeta } from './search/search-result-meta.model';\nimport { SearchResultRequest } from './search/search-result-request.model';\nimport { SearchResultFacet } from './search/search-result-facet.model';\nimport { SearchResultsDto } from './search-results-dto.model';\n\nexport class SearchResultsContainer<T> {\n  public data: T[] = [];\n  public facets: SearchResultFacet[] = [];\n  public request: SearchResultRequest;\n  public meta: SearchResultMeta;\n\n  constructor(searchResultsDto: SearchResultsDto<T>) {\n    this.data = searchResultsDto.data;\n    this.facets = searchResultsDto.facets;\n    this.request = searchResultsDto.request;\n    this.meta = searchResultsDto.meta;\n  }\n}\n","import { SearchResultFacet } from './search/search-result-facet.model';\nimport { SearchResultRequest } from './search/search-result-request.model';\nimport { SearchResultMeta } from './search/search-result-meta.model';\nimport { Status } from '../../enums/status.enum';\nimport { Dto } from './dto.model';\n\nexport class SearchResultsDto<T> extends Dto {\n  public facets: SearchResultFacet[] = [];\n  public request: SearchResultRequest;\n  public meta: SearchResultMeta;\n  constructor(code: Status, public data: T[]) {\n    super(code);\n  }\n}\n","import { BaseModel } from '../base/base.model';\n\n/**\n * A class to store an error report\n */\nexport class ClientErrorReport extends BaseModel {\n  /**\n   * @param serviceName - The name of the service reporting the error\n   * @param message - The error message\n   * @param status - The error status\n   * @param statusText - The status text\n   * @param url - The offending URL\n   * @param stackTrace - A stack trace\n   */\n  constructor(\n    public serviceName: string,\n    public message: string,\n    public status: number,\n    public statusText: string,\n    public url: string,\n    public stackTrace?: string\n  ) {\n    super();\n  }\n}\n","export class UploadEvent {\n  public type: string;\n  public message: string;\n  public progressPercent: number;\n  public callbackId?: string;\n\n  constructor(type: string, message: string = null, callbackId?: string) {\n    this.type = type;\n    this.message = message;\n    this.callbackId = callbackId;\n  }\n}\n","import { TestArtifact } from '../../enums/test-artifact.enum';\n\n/**\n * A class to store new user request data. This class serves as the base class for other user new user request\n * classes.\n */\nexport class BaseNewUserRequest {\n  /** Boolean indicating whether the object is a test artifact */\n  public testArtifact?: boolean;\n\n  /**\n   * @param firstName - The user's first name\n   * @param lastName - The user's last name\n   * @param email - THe user's email address\n   * @param password - The user's password\n   * @param roles - THe user's roles\n   * @param testArtifact - An enum indicating whether the new user request is a test artifact\n   */\n  constructor(\n    public firstName: string,\n    public lastName: string,\n    public email: string,\n    public password: string,\n    public roles: string[],\n    testArtifact?: TestArtifact\n  ) {\n    if (testArtifact === TestArtifact.true) {\n      this.testArtifact = true;\n    }\n  }\n}\n","/**\n * A class to store password reset requests\n */\nexport class BasePasswordResetRequest {\n  /**\n   * @param email - The user's email address\n   */\n  constructor(public email: string) {}\n}\n","import { BaseModel } from '../base/base.model';\n\n/**\n * The base user class\n */\nexport class BaseUser extends BaseModel {\n  /** The user's first name */\n  public firstName: string;\n\n  /** The user's last name */\n  public lastName: string;\n\n  /** Get accessor for the user's full name */\n  public get fullName(): string {\n    return this.firstName + ' ' + this.lastName;\n  }\n\n  /** The user's email address */\n  public email: string;\n\n  /** The user's email verified */\n  public emailVerified: boolean;\n\n  /** The date of the user's last login */\n  lastLoginDate: Date;\n\n  /** The total number of user logins */\n  loginCount: number;\n\n  /** A flag indicating whether the user's account has been disabled */\n  disabled: boolean;\n\n  /** The number of password resets */\n  passwordResetCount: number;\n\n  /** An array containing the user's roles */\n  public roles: string[] = [];\n}\n","/**\n * A class to return the result of validating a password reset request token\n */\nexport class ValidatePasswordResetTokenResponse {\n  /** Boolean indicating whether the token is valid */\n  public validToken: boolean;\n\n  /** The password reset token */\n  public token: string;\n\n  /** The ID of the user requesting the password reset */\n  public userId: string;\n\n  /** The message returned to the user */\n  public message: string;\n}\n","/**\n * A class to return the result of validating a verify email request token\n */\nexport class ValidateVerifyEmailTokenResponse {\n  /** Boolean indicating whether account is already verified */\n  public alreadyVerified: boolean;\n  \n  /** Boolean indicating whether the token is valid */\n  public validToken: boolean;\n\n  /** The password reset token */\n  public token: string;\n\n  /** The ID of the user requesting the password reset */\n  public userId: string;\n\n  /** The message returned to the user */\n  public message: string;\n}\n","/**\n * A class to store a query parameter\n */\nexport class Parameter {\n  /**\n   * Constructor\n   * @param name - The name of the parameter\n   * @param value - THe paramter's value\n   */\n  constructor(public name: string, public value: string) {}\n}\n","import { Parameter } from './parameter.model';\n\n/**\n * A class to store query parameters\n */\nexport class Parameters {\n  /** Get accessor for hasParameters */\n  public get hasParameters(): boolean {\n    return this._parameters.length > 0 ? true : false;\n  }\n\n  /** An array of parameters */\n  private _parameters: Parameter[] = [];\n\n  /**\n   * Add a parameter to the Parameters object\n   * @param name - The name of the paramter to add\n   * @param value - The value of the parameter to add\n   */\n  public add(name: string, value: string) {\n    this._parameters.push(new Parameter(name, value));\n  }\n\n  /**\n   * Get the parameter string\n   * @returns A parameter string\n   */\n  public getParamterString(): string {\n    let parameterString = '?';\n    for (const parameter of this._parameters) {\n      if (parameterString !== '?') {\n        parameterString += '&';\n      }\n      parameterString += parameter.name + '=' + parameter.value;\n    }\n    return parameterString;\n  }\n}\n","import { Secure } from '../../../enums/secure.enum';\nimport { Parameters } from './parameters.model';\nimport { Status } from '../../../enums/status.enum';\n\n/**\n * A class to store HTTP request options\n */\nexport class Options {\n  /** The ID of the object */\n  public id: string;\n\n  /** An enum indicating whether then API endpoint is secure */\n  public secure: Secure;\n\n  /** The API endpoint URL */\n  public url: string;\n\n  /** Boolean indocating whether the ID should be validated */\n  public validateId: boolean;\n\n  /** The type of the object */\n  public objectType: any;\n\n  /** An object containing the query parameters */\n  public parameters: Parameters;\n\n  /** An array of errors that should be suppressed (i.e. no error dialog shown) */\n  public suppressedErrors: Status[] = [];\n\n  /**\n   * Constructor\n   */\n  constructor() {\n    this.parameters = new Parameters();\n  }\n}\n","/**\n * A utility for working with URLs\n */\nexport class UrlUtil {\n  /**\n   * Join the passed URL elements\n   * @param urlElements - The URL elements to join\n   * @returns The concatenated URL elements\n   */\n  public static join(...urlElements: string[]) {\n    const resultArray = [];\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (urlElements[0].match(/^[^/:]+:\\/*$/) && urlElements.length > 1) {\n      const first = urlElements.shift();\n      urlElements[0] = first + urlElements[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (urlElements[0].match(/^file:\\/\\/\\//)) {\n      urlElements[0] = urlElements[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      urlElements[0] = urlElements[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (let i = 0; i < urlElements.length; i++) {\n      let component = urlElements[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < urlElements.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    let joinedString = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    joinedString = joinedString.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    const parts = joinedString.split('?');\n    joinedString =\n      parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n\n    return joinedString;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpEventType } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { Secure } from '../../enums/secure.enum';\nimport { Options } from './_models/base-data-options.model';\n// import { plainToClassFromExist } from 'class-transformer';\nimport { UrlUtil } from '../../util/url/url.util';\nimport { BaseModel } from '../../models/base/base.model';\nimport { ErrorDialogService } from '../../dialogs/error/error-dialog.service';\nimport { Dto } from '../../models/dto/dto.model';\nimport { ItemDto } from '../../models/dto/item-dto.model';\nimport { ClientErrorReport } from '../../models/error/client-error-report.model';\nimport { map } from 'rxjs/operators';\nimport { LeathermanAppConfigInjectionToken } from '../../config/injection-tokens/leatherman-app-config.injection-token';\nimport { ILeathermanAppConfig } from '../../config/app.config';\nimport { ErrorDialogServiceInjectionToken } from '../../config/injection-tokens/error-dialog-service.injection-token';\nimport { SearchResultsDto } from '../../models/dto/search-results-dto.model';\nimport { SearchResultsContainer } from '../../models/dto/search-results-container.model';\nimport { UploadEvent } from '../../models/events/upload-event.model';\nimport { ArrayDto } from '../../models/dto/array-dto.model';\nimport { SessionState } from 'projects/leatherman-bootstrap/src/public-api';\n\n/**\n * The base data service for communicating with API endpoints\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseDataService {\n  // **********************\n  // * Protected properties\n  // **********************\n\n  /** Set accessor for the base endpoint */\n  protected set baseEndpoint(baseEndpoint: string) {\n    this._baseEndpoint = baseEndpoint;\n    if (this._baseEndpoint.startsWith('/') === false) {\n      this._baseEndpoint = '/' + this._baseEndpoint;\n    }\n    if (this._baseEndpoint.endsWith('/') === false) {\n      this._baseEndpoint = this._baseEndpoint + '/';\n    }\n  }\n\n  /** Set accessor for the base endpoint */\n  protected get baseEndpoint(): string {\n    return this._baseEndpoint;\n  }\n\n  /** The base endpoint */\n  private _baseEndpoint: string;\n\n  /** Set accessor for the data service's item data type */\n  protected set type(type: any) {\n    this._type = type;\n  }\n\n  /** The data service's item data type */\n  private _type: any;\n\n  /** Set accessor for the api root */\n  protected get apiRoot(): string {\n    if (this.config.apiRoot) {\n      return this.config.serverUrl + '/' + this.config.apiRoot;\n    }\n    return this.config.serverUrl;\n  }\n\n  /** Get accessor for the API key  */\n  protected get apiKey(): string {\n    return this.config.apiKey;\n  }\n\n  /** Get accessor for the no token header */\n  protected get noTokenHeader(): HttpHeaders {\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache',\n      Pragma: 'no-cache',\n      Expires: 'Sat, 01 Jan 2000 00:00:00 GMT'\n    });\n  }\n\n  /** Get accessor to the header to use when the API endpoint is secured with an API key */\n  protected get apiHeader(): HttpHeaders {\n    const token = this.apiKey ? 'Bearer ' + this.apiKey : '';\n    const apiHeader = new HttpHeaders({\n      Authorization: token,\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache',\n      Pragma: 'no-cache',\n      Expires: 'Sat, 01 Jan 2000 00:00:00 GMT'\n    });\n    return apiHeader;\n  }\n\n  /** Get acccessor for the header to use when the API endpoit is secured with a JWT token */\n  protected get authHeader(): HttpHeaders {\n    let storageToken:string = '';\n    const store = this.config.store || SessionState.LocalStorage;\n    if(SessionState.SessionStorage === store) {\n      storageToken = sessionStorage.getItem(this.config.jwtTokenName);\n    } else {\n      storageToken = localStorage.getItem(this.config.jwtTokenName);\n    }\n    const token = storageToken ? 'Bearer ' + storageToken : '';\n    const authHeader = new HttpHeaders({\n      Authorization: token,\n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache',\n      Pragma: 'no-cache',\n      Expires: 'Sat, 01 Jan 2000 00:00:00 GMT'\n    });\n    return authHeader;\n  }\n\n  /**\n   * Constructor\n   * @param config - The app config object\n   * @param errorDialogService - A reference to the error dialog service\n   * @param router - A reference to the router\n   * @param httpClient - A reference to the HTTP client service\n   */\n  constructor(\n    @Inject(LeathermanAppConfigInjectionToken)\n    protected config: ILeathermanAppConfig,\n    @Inject(ErrorDialogServiceInjectionToken)\n    protected errorDialogService: ErrorDialogService,\n    protected router: Router,\n    protected httpClient: HttpClient\n  ) { }\n\n  // **********************\n  // * Protected methods\n  // **********************\n\n  /**\n   * Call a standard delete API endpoint\n   * @param id - The ID of the item to be deleted\n   * @param secure - Enum indicating whether the API endpoint is secure\n   * @returns True if the delete succeeded\n   * @async\n   */\n  protected async _delete(id: string, secure: Secure): Promise<boolean> {\n    if (\n      (await this.validateId(id, 'Error deleting a record. Invalid ID.')) ===\n      false\n    ) {\n      return false;\n    }\n    const headers = this.getHeader(secure);\n    const result = await this.httpClient\n      .delete<Dto>(UrlUtil.join(this.apiRoot, this._baseEndpoint, id), {\n        headers\n      })\n      .toPromise();\n\n    if (Dto.isError(result.status.code)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Call a non-standard delete API endpoint\n   * @param options - The request options\n   * @returns True if the delete succeeded\n   * @async\n   */\n  protected async _deleteWithOptions(options: Options): Promise<boolean> {\n    let url: string;\n    if (options.url) {\n      url = options.url;\n    } else {\n      url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);\n    }\n    if (options.id) {\n      url = UrlUtil.join(url, options.id);\n    }\n    if (options.parameters.hasParameters) {\n      url = UrlUtil.join(url, options.parameters.getParamterString());\n    }\n    const headers = this.getHeader(options.secure);\n    const result = await this.httpClient\n      .delete<Dto>(url, {\n        headers\n      })\n      .toPromise();\n\n    if (Dto.isError(result.status.code, options.suppressedErrors)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Delete all test artifacts\n   * @returns True if the delete succeded\n   * @async\n   */\n  public async _deleteTestArtifacts(): Promise<boolean> {\n    const options = new Options();\n    options.url = UrlUtil.join(\n      this.apiRoot,\n      this.baseEndpoint,\n      'deletetestartifacts'\n    );\n    options.secure = Secure.true;\n    return await this._deleteWithOptions(options).catch(async err => {\n      return await this.handlePromiseError(\n        'BaseDataService',\n        '_deleteTestArtifacts',\n        err\n      );\n    });\n  }\n\n  /**\n   * Call a standard get API endpoint\n   * @param id - The ID of the item to get\n   * @param secure - Enum indicating whether the API endpoint is secure\n   * @returns The item if the get succeeded\n   * @async\n   */\n  protected async _get<T>(id: string, secure: Secure): Promise<T> {\n    // Validate the passed ID\n    this.validateId(id, 'Error getting a record. Invalid ID.');\n    // Get the appropriate header object\n    const headers = this.getHeader(secure);\n    // Make an async call using the httpClient. Expect the result to be an ItemDto object\n    const result = await this.httpClient\n      .get<ItemDto<T>>(UrlUtil.join(this.apiRoot, this._baseEndpoint, id), {\n        headers\n      })\n      // Convert the result to a promise\n      .toPromise();\n\n    // If the returned status code is not a success code then\n    if (Dto.isError(result.status.code)) {\n      // Open the error dialog\n      this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      // Return null\n      return null;\n    }\n\n    // If the returned data is not an object, return the object with casting it\n    if (typeof result.data !== 'object') {\n      return result.data;\n    }\n\n    // // Cast the object to the appropriate class\n    // const data = plainToClassFromExist(this._type, result.data);\n\n    // Return the object\n    return result.data;\n  }\n\n  // _getObservable\n  protected _getObservable<T>(id: string, secure: Secure): Observable<T> {\n    // Validate the passed ID\n    this.validateId(id, 'Error getting a record. Invalid ID.');\n    // Get the appropriate header object\n    const headers = this.getHeader(secure);\n    // Make an async call using the httpClient. Expect the result to be an ItemDto object\n    return this.httpClient\n      .get<ItemDto<T>>(UrlUtil.join(this.apiRoot, this._baseEndpoint, id), {\n        headers\n      })\n      .pipe(\n        map(result => {\n          return result.data;\n        })\n      );\n  }\n\n  /**\n   * Call a non-standard get API endpoint that returns an observable\n   * @param id - The ID of the item to get\n   * @param options - The request options\n   * @returns The item if the get succeeded (as an observable)\n   * @async\n   */\n  protected _getObservableWithOptions<T>(options: Options): Observable<T> {\n    let url: string;\n    if (options.url) {\n      url = options.url;\n    } else {\n      url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);\n    }\n    if (options.id) {\n      url = UrlUtil.join(url, options.id);\n    }\n    if (options.parameters.hasParameters) {\n      url = UrlUtil.join(url, options.parameters.getParamterString());\n    }\n    const headers = this.getHeader(options.secure);\n    return this.httpClient\n      .get<ItemDto<T>>(url, {\n        headers\n      })\n      .pipe(\n        map(result => {\n          return result.data;\n        })\n      );\n  }\n\n  /**\n   * Call a non-standard get API endpoint\n   * @param options - The request options\n   * @returns The item if the get succeeded\n   * @async\n   */\n  protected async _getWithOptions<T>(options: Options): Promise<T> {\n    let url: string;\n    if (options.url) {\n      url = options.url;\n    } else {\n      url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);\n    }\n    if (options.id) {\n      url = UrlUtil.join(url, options.id);\n    }\n    if (options.parameters.hasParameters) {\n      url = UrlUtil.join(url, options.parameters.getParamterString());\n      console.log('Cache busting URL:' + url);\n    }\n    const headers = this.getHeader(options.secure);\n    const result = await this.httpClient\n      .get<ItemDto<T>>(url, {\n        headers\n      })\n      .toPromise();\n\n    if (Dto.isError(result.status.code, options.suppressedErrors)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    if (result.data === null || result.data === undefined) {\n      return null;\n    }\n\n    if (typeof result.data !== 'object') {\n      return result.data;\n    }\n\n    // let data: T;\n    // if (options.objectType) {\n    //   data = plainToClassFromExist(options.objectType, result.data);\n    // } else {\n    //   data = plainToClassFromExist(this._type, result.data);\n    // }\n\n    return result.data;\n  }\n\n  /**\n   * Call a standard get many API endpoint\n   * @param secure - Enum indicating whether the API endpoint is secure\n   * @returns An array of items if the get succeeded\n   * @async\n   */\n  protected async _getMany<T>(secure: Secure): Promise<T[]> {\n    const headers = this.getHeader(secure);\n    const result = await this.httpClient\n      .get<ArrayDto<T>>(UrlUtil.join(this.apiRoot, this._baseEndpoint), {\n        headers\n      })\n      .toPromise();\n\n    if (Dto.isError(result.status.code)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Call a non-standard get many API endpoint\n   * @param options - The request options\n   * @returns An array of items if the get succeeded\n   * @async\n   */\n  protected async _getManyWithOptions<T>(options: Options): Promise<T[]> {\n    let url: string;\n    if (options.url) {\n      url = options.url;\n    } else {\n      url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);\n    }\n    if (options.id) {\n      url = UrlUtil.join(url, options.id);\n    }\n    if (options.parameters.hasParameters) {\n      url = UrlUtil.join(url, options.parameters.getParamterString());\n    }\n    const headers = this.getHeader(options.secure);\n    const result = await this.httpClient\n      .get<ArrayDto<T>>(url, { headers })\n      .toPromise();\n\n    if (Dto.isError(result.status.code, options.suppressedErrors)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Call a standard post API endpoint\n   * @param object - The object to post\n   * @param secure - Enum indicating whether the API endpoint is secure\n   * @param validateId - Boolean indicating whether then object's ID should be validated\n   * @returns The posted object\n   * @async\n   */\n  protected async _post<T>(\n    object: any,\n    secure: Secure,\n    validateId: boolean = true\n  ): Promise<T> {\n    if (validateId) {\n      if (\n        !this.validateModelId(\n          object,\n          'Error posting a record. Invalid model ID.'\n        )\n      ) {\n        return null;\n      }\n    }\n    const headers = this.getHeader(secure);\n    const url = UrlUtil.join(this.apiRoot, this._baseEndpoint);\n\n    let result: ItemDto<T>;\n    try {\n      result = await this.httpClient\n        .post<ItemDto<T>>(\n          UrlUtil.join(this.apiRoot, this._baseEndpoint),\n          object,\n          {\n            headers\n          }\n        )\n        .toPromise();\n    } catch (error) {\n      console.log('**********');\n      console.log('HTTP Post Error');\n      console.log('URL: ' + url);\n      console.log(object);\n      throw error;\n    }\n\n    if (Dto.isError(result.status.code)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Call a non-standard post API endpoint\n   * @param object - The object to post\n   * @param options - The request options\n   * @returns The posted object\n   * @async\n   */\n  protected async _postWithOptions<T>(\n    object: any,\n    options: Options\n  ): Promise<T> {\n    if (options.validateId) {\n      if (\n        !this.validateModelId(\n          object,\n          'Error posting a record. Invalid model ID.'\n        )\n      ) {\n        return null;\n      }\n    }\n    let url: string;\n    if (options.url) {\n      url = options.url;\n    } else {\n      url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);\n    }\n    if (options.id) {\n      url += options.id;\n    }\n    if (options.parameters.hasParameters) {\n      url += options.parameters.getParamterString();\n    }\n    const headers = this.getHeader(options.secure);\n\n    const result = await this.httpClient\n      .post<ItemDto<T>>(url, object, {\n        headers\n      })\n      .toPromise();\n\n    if (Dto.isError(result.status.code, options.suppressedErrors)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Call a standard put API endpoint\n   * @param object - The object to put\n   * @param secure - Enum indicating whether the API endpoint is secure\n   * @param validateId - Boolean indicating whether then object's ID should be validated\n   * @returns The updated object\n   * @async\n   */\n  protected async _put<T extends BaseModel>(\n    object: any,\n    secure: Secure,\n    validateId: boolean = true\n  ): Promise<T> {\n    if (object && validateId) {\n      if (\n        !this.validateModelId(\n          object,\n          'Error putting a record. Invalid model ID.'\n        )\n      ) {\n        return null;\n      }\n    }\n    const headers = this.getHeader(secure);\n    const result = await this.httpClient\n      .put<ItemDto<T>>(\n        UrlUtil.join(this.apiRoot, this._baseEndpoint, object._id),\n        object,\n        {\n          headers\n        }\n      )\n      .toPromise();\n\n    if (Dto.isError(result.status.code)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    return result.data;\n  }\n\n  /**\n   * Call a non-standard put API endpoint\n   * @param object - The object to put\n   * @param options - The request options\n   * @returns The updated object\n   * @async\n   */\n  protected async _putWithOptions<T>(\n    options: Options,\n    object?: any\n  ): Promise<T> {\n    if (object && options.validateId) {\n      if (\n        !this.validateModelId(\n          object,\n          'Error putting a record. Invalid model ID.'\n        )\n      ) {\n        return null;\n      }\n    }\n    let url: string;\n    if (options.url) {\n      url = options.url;\n    } else {\n      url = UrlUtil.join(this.apiRoot, this._baseEndpoint, options.url);\n    }\n    if (options.id) {\n      url = UrlUtil.join(url, options.id);\n    }\n    if (options.parameters.hasParameters) {\n      url = UrlUtil.join(url, options.parameters.getParamterString());\n    }\n    const headers = this.getHeader(options.secure);\n    const result = await this.httpClient\n      .put<ItemDto<T>>(url, object, {\n        headers\n      })\n      .toPromise();\n\n    if (Dto.isError(result.status.code, options.suppressedErrors)) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    return result.data;\n  }\n\n  protected async _searchWithOptions<T>(\n    options: Options\n  ): Promise<SearchResultsContainer<T>> {\n    let url: string;\n    if (options.url) {\n      url = options.url;\n    } else {\n      url = UrlUtil.join(this.apiRoot, this.baseEndpoint, options.url);\n    }\n    if (options.id) {\n      url = UrlUtil.join(url, options.id);\n    }\n    if (options.parameters.hasParameters) {\n      url = UrlUtil.join(url, options.parameters.getParamterString());\n      console.log('Cache busting URL:' + url);\n    }\n    const headers = this.getHeader(options.secure);\n    const result = await this.httpClient\n      .get<SearchResultsDto<T>>(url, {\n        headers\n      })\n      .toPromise();\n\n    if (\n      SearchResultsDto.isError(result.status.code, options.suppressedErrors)\n    ) {\n      await this.errorDialogService.openErrorDialog(\n        result.status.text,\n        result.status.message\n      );\n      return null;\n    }\n\n    const searchResultsContainer = new SearchResultsContainer<T>(result);\n    return searchResultsContainer;\n  }\n\n  protected _uploadFormData(\n    url: string,\n    data: FormData,\n    secure: Secure\n  ): Observable<UploadEvent> {\n    const headers = this.getHeader(secure);\n    return this.httpClient\n      .post<any>(url, data, {\n        headers,\n        reportProgress: true,\n        observe: 'events'\n      })\n      .pipe(\n        map(event => {\n          let uploadEvent: UploadEvent;\n          switch (event.type) {\n            case HttpEventType.UploadProgress:\n              const progress = Math.round((100 * event.loaded) / event.total);\n              uploadEvent = new UploadEvent('Progress');\n              uploadEvent.progressPercent = progress;\n              return uploadEvent;\n\n            case HttpEventType.Response:\n              uploadEvent = new UploadEvent('Response', event.body);\n              return uploadEvent;\n            default:\n              uploadEvent = new UploadEvent(\n                'Error',\n                `Unhandled event: ${event.type}`\n              );\n              return uploadEvent;\n          }\n        })\n      );\n  }\n\n  /**\n   * Handle an error for an observable request\n   * @param serviceName - The name of the service reporting the error\n   * @param result - The return to return\n   */\n  protected handleObservableError(serviceName: string, result = {}) {\n    return (error: ClientErrorReport): Observable<any> => {\n      console.error(serviceName, error);\n      console.error(serviceName + ' error status', error.status);\n      return of(result);\n    };\n  }\n\n  /**\n   * Handle an error for a standard promise request\n   * @param serviceName - The name of the service reporting the error\n   * @param method - The name of the method reporting the error\n   * @param error - The error object\n   * @async\n   */\n  protected async handlePromiseError(\n    serviceName: string,\n    method: string,\n    error: any\n  ): Promise<null> {\n    console.log(\n      'Service: ' +\n      serviceName +\n      ' Method: ' +\n      method +\n      ' Message: ' +\n      error.message\n    );\n\n    await this.errorDialogService.openErrorDialog(\n      'Unhandled Exception',\n      'An unhandled exception error occurred: ' + error.message\n    );\n    return null;\n  }\n\n  /**\n   * Get the request header\n   * @param secure - Enum indicating the type of API endpoing security\n   * @returns An HTTP header\n   */\n  protected getHeader(secure: Secure): HttpHeaders {\n    switch (secure) {\n      case Secure.true:\n        return this.authHeader;\n      case Secure.api:\n        return this.apiHeader;\n      case Secure.false:\n      default:\n        return this.noTokenHeader;\n    }\n  }\n\n  /**\n   * Validate the ID of a model\n   * @param model - The model to validate\n   * @param message - The message to display if validating fails\n   * @returns True if the validation succeeded\n   * @async\n   */\n  private async validateModelId(model: any, message: string): Promise<boolean> {\n    if (!model._id) {\n      await this.errorDialogService.openErrorDialog(\n        'Invalid Model ID',\n        message\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Validate the ID of a model\n   * @param id - The ID to validate\n   * @param message - The message to display if validating fails\n   * @returns True if the validation succeeded\n   * @async\n   */\n  private async validateId(id: string, message: string): Promise<boolean> {\n    if (!id) {\n      await this.errorDialogService.openErrorDialog(\n        'Invalid Model ID',\n        message\n      );\n      return false;\n    }\n    return true;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { BaseDataService } from '../base-data/base-data.service';\nimport { Options } from '../base-data/_models/base-data-options.model';\nimport { Secure } from '../../enums/secure.enum';\nimport { UrlUtil } from '../../util/url/url.util';\nimport { ErrorDialogService } from '../../dialogs/error/error-dialog.service';\nimport { LoginRequest } from '../../models/authentication/login-request.model';\nimport { BaseUser } from '../../models/base-user/base-user.model';\nimport { BaseNewUserRequest } from '../../models/base-user/base-new-user-request.model';\nimport { LeathermanAppConfigInjectionToken } from '../../config/injection-tokens/leatherman-app-config.injection-token';\nimport { ILeathermanAppConfig } from '../../config/app.config';\nimport { ErrorDialogServiceInjectionToken } from '../../config/injection-tokens/error-dialog-service.injection-token';\nimport { Status } from '../../enums/status.enum';\nimport { AuthenticationDetails } from '../../models/authentication/authentication-details.model';\n\n/**\n * A service for communicating with the server's authentication endpoints\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationDataService extends BaseDataService {\n  /**\n   * Constructor\n   * @param config - The app config object\n   * @param errorDialogService - A reference to the error dialog service\n   * @param router - A reference to the router\n   * @param httpClient - A reference to the HTTP client\n   */\n  constructor(\n    @Inject(LeathermanAppConfigInjectionToken) config: ILeathermanAppConfig,\n    @Inject(ErrorDialogServiceInjectionToken)\n    errorDialogService: ErrorDialogService,\n    router: Router,\n    httpClient: HttpClient\n  ) {\n    super(config, errorDialogService, router, httpClient);\n  }\n\n  // /**\n  //  * Get a JWT token\n  //  * @param loginRequest - The login request object\n  //  * @returns A JWT token\n  //  * @async\n  //  */\n  // public async getToken<T extends LoginRequest>(loginRequest: T): Promise<string> {\n  //   const options = new Options();\n  //   options.url = UrlUtil.join(this.apiRoot, 'gettoken');\n  //   options.secure = Secure.false;\n  //   options.validateId = false;\n  //   options.suppressedErrors.push(Status.NotAuthorized);\n  //   const token = await this._postWithOptions<string>(\n  //     loginRequest,\n  //     options\n  //   ).catch(async err => {\n  //     return await this.handlePromiseError(\n  //       'AuthenticationDataService',\n  //       'getToken',\n  //       err\n  //     );\n  //   });\n  //   return token;\n  // }\n\n  public async authenticate<T extends LoginRequest>(\n    loginRequest: T\n  ): Promise<AuthenticationDetails> {\n    const options = new Options();\n    options.url = UrlUtil.join(this.apiRoot, 'authenticate');\n    options.secure = Secure.false;\n    options.validateId = false;\n    options.suppressedErrors.push(Status.NotAuthorized);\n    console.log('About to authenticate');\n    const authenticationDetails = await this._postWithOptions<\n      AuthenticationDetails\n    >(loginRequest, options).catch(async err => {\n      console.log(err);\n      return await this.handlePromiseError(\n        'AuthenticationDataService',\n        'authenticate',\n        err\n      );\n    });\n    console.log('Authentication details');\n    console.log(authenticationDetails);\n    return authenticationDetails;\n  }\n\n  /**\n   * Register a new user\n   * @param newUserRequest - A new user request object\n   * @param secure - An enum indicating whether the endpoint is secure\n   */\n  public async register<T extends BaseNewUserRequest, U extends BaseUser>(\n    newUserRequest: T,\n    secure: Secure\n  ): Promise<U> {\n    const options = new Options();\n    options.url = UrlUtil.join(this.apiRoot, this.config.registerRoute);\n    options.secure = secure;\n    options.validateId = false;\n    const user = await this._postWithOptions<U>(newUserRequest, options).catch(\n      async err => {\n        return await this.handlePromiseError(\n          'AuthenticationDataService',\n          'register',\n          err\n        );\n      }\n    );\n    return user;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { AuthenticationDataService } from './authentication-data.service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { LoginRequest } from '../../models/authentication/login-request.model';\nimport { BaseNewUserRequest } from '../../models/base-user/base-new-user-request.model';\nimport { BaseUser } from '../../models/base-user/base-user.model';\nimport { ILeathermanAppConfig } from '../../config/app.config';\nimport { LeathermanAppConfigInjectionToken } from '../../config/injection-tokens/leatherman-app-config.injection-token';\nimport { Secure } from '../../enums/secure.enum';\nimport { AuthenticationDetails } from '../../models/authentication/authentication-details.model';\nimport { SessionState } from 'projects/leatherman-bootstrap/src/public-api';\n\n/**\n * A service to handle client authentication\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  // **********************\n  // * Private properties\n  // **********************\n\n  /** Get accessor for the JWT token */\n  private get token(): string {\n    if (!this._token) {\n      if(this.store === SessionState.SessionStorage) {\n        this._token = this.getTokenFromSessionStorage();\n      } else {\n        this._token = this.getTokenFromLocalStorage();\n      }\n    }\n    return this._token;\n  }\n\n  /** Set accessor for the JWT token */\n  private set token(token: string) {\n    if(this.store === SessionState.SessionStorage) {\n      this.setSessionStorage(token);\n    } else {\n      this.setLocalStorage(token);\n    }\n    this._token = token;\n  }\n\n  /** Reference to the JWT helper service */\n  private jwtHelper = new JwtHelperService();\n  private _token: string;\n  private store: string;\n  \n  /**\n   * Constructor\n   * @param config - The app config object\n   * @param authenticationDataService - A reference to the authentication data service\n   */\n  constructor(\n    @Inject(LeathermanAppConfigInjectionToken)\n    private config: ILeathermanAppConfig,\n    private authenticationDataService: AuthenticationDataService\n  ) { \n    this.store = config.store || SessionState.LocalStorage;\n  }\n\n  // **********************\n  // * Public methods\n  // **********************\n\n  public async authenticate(loginRequest: LoginRequest): Promise<AuthenticationDetails> {\n    const authenticationDetails = await this.authenticationDataService.authenticate(\n      loginRequest\n    );\n    if (authenticationDetails.token && authenticationDetails.token.length > 0) {\n      this.token = authenticationDetails.token;\n    } else {\n      this.clearToken();\n    }\n    return authenticationDetails;\n  }\n\n  /**\n   * Clear the JWT token\n   */\n  public clearToken() {\n    this._token = '';\n    if(this.store === SessionState.LocalStorage) {\n      this.clearLocalStorage();\n    } else {\n      this.clearSessionStorage();\n    }\n    \n  }\n\n  /**\n   * Get the user's primary role\n   * @returns The user's primary role\n   * @async\n   */\n  public getPrimaryUserRole(): string {\n    const userRoles = this.getUserRoles();\n    if (userRoles.find(role => role === 'admin')) {\n      return 'admin';\n    }\n    if (userRoles.find(role => role === 'user')) {\n      return 'user';\n    }\n    return userRoles[0];\n  }\n\n  /**\n   * Get the JWT token expiration date\n   * @returns The date the token expires\n   */\n  public getTokenExpirationDate(): Date | null {\n    const expirationDate = this.jwtHelper.getTokenExpirationDate(this.token);\n    return expirationDate;\n  }\n\n  /**\n   * Get the logged in user's ID\n   * @returns The user's ID\n   */\n  public getUserId(): string {\n    if (this.isAuthenticated() === false) {\n      return null;\n    }\n    const tokenPayload = this.jwtHelper.decodeToken(this.token);\n    return tokenPayload.userId;\n  }\n\n  /**\n   * Get the user's roles\n   * @returns An array of the user's roles\n   */\n  public getUserRoles(): string[] {\n    if (this.isAuthenticated() === false) {\n      return [];\n    }\n    const tokenPayload = this.jwtHelper.decodeToken(this.token);\n    return tokenPayload.roles;\n  }\n\n  /**\n   * Determine if the user is authenticated\n   * @returns True if the user is authenticated\n   */\n  public isAuthenticated(): boolean {\n    if (!this.token) {\n      return false;\n    }\n    if (this.jwtHelper.isTokenExpired(this.token)) {\n      this.clearLocalStorage();\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Log in a user\n   * @param loginRequest - The login request object\n   * @returns True if the login succeeded\n   * @async\n   */\n  public async loginUser<T extends LoginRequest>(loginRequest: T): Promise<AuthenticationDetails> {\n    const authenticationDetails = await this.authenticationDataService.authenticate(loginRequest);\n    if (authenticationDetails.token && authenticationDetails.token.length > 0) {\n      this.token = authenticationDetails.token;\n    } else {\n      this.clearToken();\n    }\n    return authenticationDetails;\n  }\n\n  /**\n   * Log out a user\n   */\n  public logoutUser() {\n    this.clearToken();\n  }\n\n  /**\n   * Register a new user\n   * @param newUserRequest - The new user request\n   * @param secure - An enum indicating whether the endpoing is secure\n   */\n  public async registerUser<T extends BaseNewUserRequest, U extends BaseUser>(\n    newUserRequest: T,\n    secure: Secure = Secure.false\n  ): Promise<U> {\n    const user = await this.authenticationDataService.register<T, U>(\n      newUserRequest,\n      secure\n    );\n    return user;\n  }\n\n  /**\n   * Set the JWT token\n   * @param token - The JWT token\n   */\n  public setToken(token: string) {\n    if(this.store === SessionState.LocalStorage) {\n      this.setLocalStorage(token);\n    } else {\n      this.setSessionStorage(token);\n    }\n    \n    this._token = token;\n  }\n\n  // **********************\n  // * Private methods\n  // **********************\n\n  /**\n   * Remove the JWT token from local storage\n   */\n  private clearLocalStorage() {\n    localStorage.removeItem(this.config.jwtTokenName);\n  }\n  \n  /**\n   * Remove the JWT token from session storage\n   */\n  private clearSessionStorage() {\n    sessionStorage.removeItem(this.config.jwtTokenName);\n  }\n\n  /**\n   * Get the JWT token from local storage\n   * @returns The JWT token\n   */\n\n  private getTokenFromLocalStorage(): string {\n    const token = localStorage.getItem(this.config.jwtTokenName);\n    if (!token) {\n      return '';\n    }\n    return token;\n  }\n  /**\n   * Get the JWT token from session storage\n   * @returns The JWT token\n   */\n\n  private getTokenFromSessionStorage(): string {\n    const token = sessionStorage.getItem(this.config.jwtTokenName);\n    if (!token) {\n      return '';\n    }\n    return token;\n  }\n\n  /**\n   * Save the JWT token to local storage\n   * @param token - The JWT token\n   */\n  private setLocalStorage(token: string) {\n    localStorage.setItem(this.config.jwtTokenName, token);\n  }\n  /**\n   * Save the JWT token to session storage\n   * @param token - The JWT token\n   */\n  private setSessionStorage(token: string) {\n    sessionStorage.setItem(this.config.jwtTokenName, token);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from '../authentication/authentication.service';\n\n/**\n * A service used to limit access to a route to administrators\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminAuthGuardService implements CanActivate {\n  /**\n   * Constructor\n   * @param authenticationService - A reference to the authentication service\n   * @param router - A reference to the router\n   */\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  /**\n   * Determine whether a route can be activated\n   * @param route - The activated route snapshot\n   * @param state - The router state snapshot\n   * @returns An observable boolean or a promise of a boolean\n   */\n  public canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    const isAuthenticated = this.authenticationService.isAuthenticated();\n    if (isAuthenticated) {\n      const userRole = this.authenticationService.getPrimaryUserRole();\n      if (userRole === 'admin') {\n        return true;\n      }\n    }\n    this.router.navigate(['/admin/login']);\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from '../authentication/authentication.service';\n\n/**\n * A service used to limit access to a route to registered users\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAuthGuardService implements CanActivate {\n  /**\n   * Constructor\n   * @param authenticationService - A reference to the authentication service\n   * @param router - A reference to the router\n   */\n  constructor(\n    private authenticationService: AuthenticationService,\n    private router: Router\n  ) {}\n\n  /**\n   * Determine whether a route can be activated\n   * @param route - The activated route snapshot\n   * @param state - The router state snapshot\n   * @returns An observable boolean or a promise of a boolean\n   */\n  public canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    if (this.authenticationService.isAuthenticated()) {\n      return true;\n    }\n    this.router.navigate(['/']);\n    return false;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * A base UI service for components. This service allows sub-components to communicate the components\n * without maintaining a direct reference.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class BaseComponentUIService {\n  /** A delete request RXJS subject */\n  public deleteRequestSubject$ = new Subject<string>();\n\n  /** An edit request RXJS subject */\n  public editRequestSubject$ = new Subject<string>();\n\n  /** A clone request RXJS subject */\n  public cloneRequestSubject$ = new Subject<string>();\n\n  /**\n   * Broadcast a clone request\n   * @param id - The ID of the object associated with the request\n   */\n  public cloneRequest(id: string) {\n    this.cloneRequestSubject$.next(id);\n  }\n\n  /**\n   * Broadcast a delete request\n   * @param id - The ID of the object associated with the request\n   */\n  public deleteRequest(id: string) {\n    this.deleteRequestSubject$.next(id);\n  }\n\n  /**\n   * Broadcast an edit request\n   * @param id - The ID of the object associated with the request\n   */\n  public editRequest(id: string) {\n    this.editRequestSubject$.next(id);\n  }\n\n  /**\n   * Subscribe to an RXJS subject\n   * @param subjectName - The name of the subject to subscribe to\n   * @param callback - The method to callback\n   */\n  public subscribe(\n    subjectName: string,\n    callback: (result: any) => Promise<void> | void\n  ) {\n    this[subjectName].subscribe(callback);\n  }\n}\n","/**\n * The base service\n */\nexport class BaseService {}\n","import { ErrorHandler, Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { BaseDataService } from '../base-data/base-data.service';\nimport { Secure } from '../../enums/secure.enum';\nimport { ErrorDialogService } from '../../dialogs/error/error-dialog.service';\nimport { ClientErrorReport } from '../../models/error/client-error-report.model';\nimport { LeathermanAppConfigInjectionToken } from '../../config/injection-tokens/leatherman-app-config.injection-token';\nimport { ILeathermanAppConfig } from '../../config/app.config';\nimport { ErrorDialogServiceInjectionToken } from '../../config/injection-tokens/error-dialog-service.injection-token';\n\n/**\n * A custom error handler service for unhandled exceptions\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomErrorHandlerService extends BaseDataService\n  implements ErrorHandler {\n  /**\n   * Constructor\n   * @param config - The app config object\n   * @param errorDialogService - A reference to the error dialog service\n   * @param router - A reference to the router\n   * @param httpClient - A reference to the HTTP client\n   */\n  constructor(\n    @Inject(LeathermanAppConfigInjectionToken) config: ILeathermanAppConfig,\n    @Inject(ErrorDialogServiceInjectionToken)\n    errorDialogService: ErrorDialogService,\n    router: Router,\n    httpClient: HttpClient\n  ) {\n    super(config, errorDialogService, router, httpClient);\n    this.baseEndpoint = 'error/client';\n  }\n\n  /**\n   * Delete a client error from the database\n   * @param clientErrorId - The ID of the client error to delete\n   * @returns True if the delete suceeded\n   * @async\n   */\n  public async deleteClientError(clientErrorId: string): Promise<boolean> {\n    return this._delete(clientErrorId, Secure.true).catch(async err => {\n      return await this.handlePromiseError(\n        'CustomErrorHandlerService',\n        'deleteClientError',\n        err\n      );\n    });\n  }\n\n  /**\n   * Get the details of a client error record\n   * @param clientErrorId - The ID of the client error to get\n   * @returns A client error object\n   * @async\n   */\n  public async getClientError(\n    clientErrorId: string\n  ): Promise<ClientErrorReport> {\n    const clientError = await this._get<ClientErrorReport>(\n      clientErrorId,\n      Secure.true\n    ).catch(async err => {\n      return await this.handlePromiseError(\n        'CustomErrorHandlerService',\n        'getClientError',\n        err\n      );\n    });\n    return clientError;\n  }\n\n  /**\n   * Handle a standard error\n   * @param error - The error object\n   * @async\n   */\n  public async handleError(error: any): Promise<null> {\n    console.log('Default error handler caught an error');\n    console.log(error);\n    if (this.config.production === false) {\n      await this.errorDialogService.openErrorDialog(\n        'Unexpected Error',\n        'An unexpected error occurred: ' + error.message\n      );\n    }\n    const errorReport = new ClientErrorReport(\n      'unknown',\n      error.message,\n      error.status,\n      error.statusText,\n      error.url\n    );\n    const clientErrorReport = await this.reportClientError(errorReport);\n    document.location.href =\n      this.config.errorRoute + '?errorReportId=' + clientErrorReport._id;\n    return null;\n  }\n\n  /**\n   * Report a client error\n   * @param errorReport - The client error object\n   * @returns The client error report\n   * @async\n   */\n  public async reportClientError(\n    errorReport: ClientErrorReport\n  ): Promise<ClientErrorReport> {\n    const error = await this._post<ClientErrorReport>(\n      errorReport,\n      Secure.true,\n      false\n    ).catch(async err => {\n      return await this.handlePromiseError(\n        'CustomErrorHandlerService',\n        'reportHttpError',\n        err\n      );\n    });\n    return error;\n  }\n}\n","import {\n  Router,\n  ActivatedRouteSnapshot,\n  ActivatedRoute,\n  NavigationEnd,\n  RouterState,\n  RouterStateSnapshot\n} from '@angular/router';\nimport { Injectable, Output, EventEmitter, Directive } from '@angular/core';\nimport { IRoutePart } from './_interfaces/route-part.interface';\n\n/**\n * A service to parse route parts\n */\n@Directive()\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoutePartsService {\n  /** An array of route parts */\n  public routeParts: IRoutePart[];\n\n  /** An event emitter that will trigger when a route changes */\n  @Output() routeChanged: EventEmitter<IRoutePart[]> = new EventEmitter();\n\n  /**\n   * Constructor\n   * @param router - A reference to the router\n   * @param activatedRoute - A reference to the activated route\n   */\n  constructor(private router: Router, activatedRoute: ActivatedRoute) {\n    const me = this;\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        const state: RouterState = this.router.routerState;\n        const snapshot: RouterStateSnapshot = state.snapshot;\n        const root: ActivatedRouteSnapshot = snapshot.root;\n        const routeParts = this.generateRouteParts(root);\n        me.routeParts = this.formatRouteParts(routeParts);\n        this.routeChanged.emit(me.routeParts);\n      }\n    });\n  }\n\n  /**\n   * Generate the route parts\n   * @param snapshot - The activated route snapshot\n   * @returns An array of route parts\n   */\n  public generateRouteParts(snapshot: ActivatedRouteSnapshot): IRoutePart[] {\n    let routeParts = <IRoutePart[]>[];\n    if (snapshot) {\n      if (snapshot.firstChild) {\n        routeParts = routeParts.concat(\n          this.generateRouteParts(snapshot.firstChild)\n        );\n      }\n      if (snapshot.url.length) {\n        routeParts.push({\n          title: snapshot.data['title'],\n          breadcrumb: snapshot.data['breadcrumb'],\n          url: snapshot.url[0].path,\n          urlSegments: snapshot.url,\n          params: snapshot.params\n        });\n      }\n    }\n    return routeParts;\n  }\n\n  /**\n   * Format the route parts\n   * @param routeParts - An array of route parts\n   * @returns An array of formatted route parts\n   */\n  public formatRouteParts(routeParts: IRoutePart[]): IRoutePart[] {\n    // routeParts.push({\n    //     title: 'Home',\n    //     breadcrumb: 'Home',\n    //     url: '/',\n    //     urlSegments: [],\n    //     params: {},\n    // });\n    routeParts.reverse();\n    let fullUrl = '';\n    for (const routePart of routeParts) {\n      if (fullUrl === '') {\n        fullUrl = routePart.url;\n      } else {\n        if (fullUrl.endsWith('/') === false) {\n          fullUrl += '/';\n        }\n        fullUrl = fullUrl + routePart.url;\n      }\n      routePart.url = fullUrl;\n    }\n    return routeParts;\n  }\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { BaseDataService } from '../base-data/base-data.service';\nimport { ErrorDialogService } from '../../dialogs/error/error-dialog.service';\nimport { Options } from '../base-data/_models/base-data-options.model';\nimport { Secure } from '../../enums/secure.enum';\nimport { UrlUtil } from '../../util/url/url.util';\nimport { BasePasswordResetRequest } from '../../models/base-user/base-password-reset-request.model';\nimport { BaseUser } from '../../models/base-user/base-user.model';\nimport { LeathermanAppConfigInjectionToken } from '../../config/injection-tokens/leatherman-app-config.injection-token';\nimport { ILeathermanAppConfig } from '../../config/app.config';\nimport { ErrorDialogServiceInjectionToken } from '../../config/injection-tokens/error-dialog-service.injection-token';\nimport { ValidatePasswordResetTokenResponse } from '../../models/base-user/validate-password-reset-token-response.model';\nimport { PasswordReset } from '../../models/base-user/password-reset.model';\nimport { GetOptions } from '../../models/args/get-options.model';\nimport { ValidateVerifyEmailTokenResponse } from '../../models/base-user/validate-verify-email-token-response.model';\n\n/**\n * The base user data service\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BaseUserDataService extends BaseDataService {\n    /**\n     * Constructor\n     * @param config - The app config object\n     * @param errorDialogService - A reference to the error dialog service\n     * @param router - A reference to the router\n     * @param httpClient - A reference to the HTTP client service\n     */\n    constructor(\n        @Inject(LeathermanAppConfigInjectionToken)\n        protected config: ILeathermanAppConfig,\n        @Inject(ErrorDialogServiceInjectionToken)\n        errorDialogService: ErrorDialogService,\n        router: Router,\n        httpClient: HttpClient\n    ) {\n        super(config, errorDialogService, router, httpClient);\n        this.baseEndpoint = config.userBaseEndpoint;\n        this.type = BaseUser;\n    }\n\n    /**\n     * Add a role to a user\n     * @param userId - The user's ID\n     * @param role - The role to add to the user\n     * @returns The updated user\n     * @async\n     */\n    public async _addUserRole<T extends BaseUser>(\n        userId: string,\n        role: string\n    ): Promise<T> {\n        const options = new Options();\n        options.secure = Secure.true;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            userId,\n            'addrole'\n        );\n        options.parameters.add('role', role);\n        return this._putWithOptions<T>(options).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'addUserRole',\n                err\n            );\n        });\n    }\n\n    /**\n     * Delete a user\n     * @param userId - The ID of the user to delete\n     * @returns True if the delete succeeded\n     * @async\n     */\n    public async _deleteUser(userId: string): Promise<boolean> {\n        return this._delete(userId, Secure.true).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'deleteUser',\n                err\n            );\n        });\n    }\n\n    /**\n     * Get all admin users\n     * @returns An array of admin users\n     * @asyncs\n     */\n    public async _getAdminUsers<T extends BaseUser>(\n        options?: GetOptions\n    ): Promise<T[]> {\n        const getManyOptions = new Options();\n        getManyOptions.secure = Secure.true;\n        getManyOptions.url = UrlUtil.join(this.apiRoot, this.baseEndpoint);\n        getManyOptions.parameters.add('role', 'admin');\n        if (options) {\n            getManyOptions.parameters.add('skip', options.skip.toString());\n            getManyOptions.parameters.add('trace', options.take.toString());\n            if (options.sort.length > 0) {\n                getManyOptions.parameters.add('sort', options.sort);\n            }\n        }\n        const adminUsers = await this._getManyWithOptions<T>(getManyOptions).catch(\n            async err => {\n                return await this.handlePromiseError(\n                    'UserDataService',\n                    'getAdminUsers',\n                    err\n                );\n            }\n        );\n        return adminUsers;\n    }\n\n    /**\n     * Get a user\n     * @param id - The ID of the user to get\n     * @returns A user object\n     * @async\n     */\n    public async _getUser<T extends BaseUser>(id: string): Promise<T> {\n        const options = new Options();\n        options.secure = Secure.true;\n        options.url = UrlUtil.join(this.apiRoot, this.baseEndpoint, id);\n        const user = await this._getWithOptions<T>(options).catch(async err => {\n            return await this.handlePromiseError('UserDataService', 'getUser', err);\n        });\n        return user;\n    }\n\n    // getBasicUsers\n    public async _getBasicUsers<T extends BaseUser>(\n        options?: GetOptions\n    ): Promise<T[]> {\n        const getManyOptions = new Options();\n        getManyOptions.secure = Secure.true;\n        getManyOptions.url = UrlUtil.join(this.apiRoot, this.baseEndpoint);\n        getManyOptions.parameters.add('onlyrole', 'user');\n        if (options) {\n            getManyOptions.parameters.add('skip', options.skip.toString());\n            getManyOptions.parameters.add('trace', options.take.toString());\n            if (options.sort.length > 0) {\n                getManyOptions.parameters.add('sort', options.sort);\n            }\n        }\n        const assessmentUsers = await this._getManyWithOptions<T>(\n            getManyOptions\n        ).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'getAssessmentUsers',\n                err\n            );\n        });\n        return assessmentUsers;\n    }\n\n    /**\n     * Get all users\n     * @returns An array of users\n     * @async\n     */\n    public async _getUsers<T extends BaseUser>(\n        options?: GetOptions\n    ): Promise<T[]> {\n        const getManyOptions = new Options();\n        getManyOptions.secure = Secure.true;\n        getManyOptions.url = UrlUtil.join(this.apiRoot, this.baseEndpoint);\n        if (options) {\n            getManyOptions.parameters.add('skip', options.skip.toString());\n            getManyOptions.parameters.add('trace', options.take.toString());\n            if (options.sort.length > 0) {\n                getManyOptions.parameters.add('sort', options.sort);\n            }\n        }\n        const assessmentUsers = await this._getManyWithOptions<T>(\n            getManyOptions\n        ).catch(async err => {\n            return await this.handlePromiseError('UserDataService', 'getUsers', err);\n        });\n        return assessmentUsers;\n    }\n\n    /**\n     * Remove a role from a user\n     * @param userId - The ID of the user\n     * @param role - The role to remove from the user\n     */\n    public async _removeUserRole<T extends BaseUser>(\n        userId: string,\n        role: string\n    ): Promise<T> {\n        const options = new Options();\n        options.secure = Secure.true;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            userId,\n            'remove-role'\n        );\n        options.parameters.add('role', role);\n        return this._putWithOptions<T>(options).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'removeUserRole',\n                err\n            );\n        });\n    }\n\n    /**\n     * Request a password reset\n     * @param passwordResetRequest - A password reset request object\n     * @returns True if the request succeeded\n     * @async\n     */\n    public async _requestPasswordReset(\n        passwordResetRequest: BasePasswordResetRequest\n    ): Promise<boolean> {\n        const options = new Options();\n        options.secure = Secure.false;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            'request-password-reset'\n        );\n        options.objectType = BasePasswordResetRequest;\n        await this._postWithOptions<boolean>(passwordResetRequest, options).catch(\n            async err => {\n                return await this.handlePromiseError(\n                    'UserDataService',\n                    'requestPasswordReset',\n                    err\n                );\n            }\n        );\n        return true;\n    }\n\n    /**\n     * Request a password reset token. This method is only used for testing.\n     * @param passwordResetRequest - A password reset request object\n     * @returns A password reset token\n     * @async\n     */\n    public async _requestPasswordResetToken(\n        passwordResetRequest: BasePasswordResetRequest\n    ): Promise<string> {\n        const options = new Options();\n        options.secure = Secure.false;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            'request-password-reset-token'\n        );\n        options.objectType = BasePasswordResetRequest;\n        const passwordResetToken = await this._postWithOptions<string>(\n            passwordResetRequest,\n            options\n        ).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'requestPasswordResetToken',\n                err\n            );\n        });\n        return passwordResetToken;\n    }\n\n    /**\n     * Resend Verification email\n     * @param verifyEmail - A verification email\n     * @returns True if the verification email is sent\n     */\n    public async _resendVerificationEmail(\n        verificationEmail: string\n    ): Promise<boolean> {\n        const options = new Options();\n        options.secure = Secure.false;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            'resend-verification-email'\n        );\n        options.parameters.add('email', verificationEmail);\n        return this._getWithOptions<boolean>(\n            options\n        ).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'resendVerificationEmail',\n                err\n            );\n        });\n    }\n\n    /**\n     * Reset a password\n     * @param passwordReset - A password reset object\n     * @returns True if the password was successfully reset\n     * @async\n     */\n    public async _resetPassword(passwordReset: PasswordReset): Promise<boolean> {\n        const options = new Options();\n        options.secure = Secure.false;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            'reset-password'\n        );\n        const result = await this._postWithOptions<boolean>(passwordReset, options);\n        return result;\n    }\n\n    /**\n     * Update a user\n     * @param user - The user to update\n     * @returns The updated user\n     * @async\n     */\n    public async _updateUser<T extends BaseUser>(user: T): Promise<T> {\n        return this._put<T>(user, Secure.true).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'updateUser',\n                err\n            );\n        });\n    }\n\n    /**\n     * Validate a password reset token\n     * @param passwordResetToken - The password reset token to validate\n     * @returns A validate password reset token response\n     * @async\n     */\n    public async _validatePasswordResetToken(\n        passwordResetToken: string\n    ): Promise<ValidatePasswordResetTokenResponse> {\n        const options = new Options();\n        options.secure = Secure.false;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            'validate-password-reset-token'\n        );\n        options.parameters.add('token', passwordResetToken);\n        return this._getWithOptions<ValidatePasswordResetTokenResponse>(\n            options\n        ).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'validatePasswordResetToken',\n                err\n            );\n        });\n    }\n\n    /**\n     * Validate an email address\n     * @param email - The email address to validate\n     * @returns True if the email address is not currently in the user table\n     * @async\n     */\n    public _validateEmail(email: string): Observable<boolean> {\n        return this.httpClient.get<boolean>(\n            UrlUtil.join(\n                this.apiRoot,\n                this.baseEndpoint,\n                'validate-email' + '?email=' + email\n            ),\n            {\n                headers: this.noTokenHeader\n            }\n        );\n    }\n\n    public async _validateVerifyEmailToken(\n        verifyEmailToken: string\n    ): Promise<ValidateVerifyEmailTokenResponse> {\n        const options = new Options();\n        options.secure = Secure.false;\n        options.url = UrlUtil.join(\n            this.apiRoot,\n            this.baseEndpoint,\n            'validate-verify-email-token'\n        );\n        options.parameters.add('token', verifyEmailToken);\n        return this._getWithOptions<ValidateVerifyEmailTokenResponse>(\n            options\n        ).catch(async err => {\n            return await this.handlePromiseError(\n                'UserDataService',\n                'validateVerifyEmailToken',\n                err\n            );\n        });\n    }\n}\n","/**\n * A class to store a password reset\n */\nexport class PasswordReset {\n  /**\n   * @param token - The password reset token\n   * @param userId - The ID of the user requesting the password reset\n   * @param newPassword - The user's new password\n   */\n  constructor(\n    public token: string,\n    public userId: string,\n    public newPassword: string\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { BaseUserDataService } from './base-user-data.service';\nimport { Router } from '@angular/router';\nimport { BaseService } from '../base-service/base.service';\nimport { AuthenticationService } from '../authentication/authentication.service';\nimport { ConfirmDialogService } from '../../dialogs/confirm/confirm-dialog.service';\nimport { DialogButton } from '../../enums/dialog-button.enum';\nimport { LoginRequest } from '../../models/authentication/login-request.model';\nimport { BaseUser } from '../../models/base-user/base-user.model';\nimport { BasePasswordResetRequest } from '../../models/base-user/base-password-reset-request.model';\nimport { BaseNewUserRequest } from '../../models/base-user/base-new-user-request.model';\nimport { ValidatePasswordResetTokenResponse } from '../../models/base-user/validate-password-reset-token-response.model';\nimport { Secure } from '../../enums/secure.enum';\nimport { PasswordReset } from '../../models/base-user/password-reset.model';\nimport { GetOptions } from '../../models/args/get-options.model';\nimport { AuthenticationDetails } from '../../models/authentication/authentication-details.model';\nimport { ValidateVerifyEmailTokenResponse } from '../../models/base-user/validate-verify-email-token-response.model';\n\n/**\n * The base user service\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class BaseUserService extends BaseService {\n    // **********************\n    // * Public properties\n    // **********************\n\n    /** Get accessor for the user ID */\n    public get userId(): string {\n        if (!this._userId) {\n            this._userId = this.authenticationService.getUserId();\n        }\n        return this._userId;\n    }\n\n    /** Get accessor for user role */\n    public get userRole(): string {\n        if (!this._primaryUserRole) {\n            this._primaryUserRole = this.authenticationService.getPrimaryUserRole();\n        }\n        return this._primaryUserRole;\n    }\n\n    // **********************\n    // * Protected properties\n    // **********************\n\n    /** The user ID */\n    protected _userId: string;\n\n    /** The user's primary role */\n    protected _primaryUserRole: string;\n\n    /**\n     * Constructor\n     * @param authenticationService - A reference to the authentication service\n     * @param dataService - A reference to the user data service\n     * @param confirmDialogService - A reference to the confirm dialog service\n     * @param router - A reference to the router\n     */\n    constructor(\n        protected authenticationService: AuthenticationService,\n        protected dataService: BaseUserDataService,\n        protected confirmDialogService: ConfirmDialogService,\n        protected router: Router\n    ) {\n        super();\n    }\n\n    // **********************\n    // * Public methods\n    // **********************\n\n    /**\n     * Delete a user\n     * @param userId - The ID of the user to delete\n     * @returns True if the delete succeeded\n     * @async\n     */\n    public async _deleteUser(userId: string): Promise<boolean> {\n        const confirmStatus = await this.confirmDialogService.openConfirmDialog(\n            'Delete User',\n            'Do you want to delete the selected user? This action cannot be undone.'\n        );\n        if (confirmStatus.button === DialogButton.Cancel) {\n            return false;\n        }\n        const result = await this.dataService._deleteUser(userId);\n        return result;\n    }\n\n    /**\n     * Get all admin users\n     * @returns An array of admin users\n     * @async\n     */\n    public async _getAdminUsers<T extends BaseUser>(): Promise<T[]> {\n        const users = await this.dataService._getAdminUsers<T>();\n        return users;\n    }\n\n    /**\n     * Get all basic users\n     * @returns An array of basic (non-admin) users\n     * @async\n     */\n    public async _getBasicUsers<T extends BaseUser>(): Promise<T[]> {\n        const users = await this.dataService._getBasicUsers<T>();\n        return users;\n    }\n\n    /**\n     * Get the logged in user\n     * @returns The user object\n     * @async\n     */\n    public async _getCurrentUser<T extends BaseUser>(): Promise<T> {\n        if (!this.userId) {\n            return null;\n        }\n        const id = this.userId;\n        const user = await this.dataService._getUser<T>(id);\n        return user;\n    }\n\n    /**\n     * Get all users\n     * @returns An array of users\n     * @async\n     */\n    public async _getUsers<T extends BaseUser>(\n        options: GetOptions\n    ): Promise<T[]> {\n        const users = await this.dataService._getUsers<T>(options);\n        return users;\n    }\n\n    /**\n     * Get the user's primary role\n     * @returns The user's primary role\n     * @async\n     */\n    public _getPrimaryUserRole(): string {\n        return this.authenticationService.getPrimaryUserRole();\n    }\n\n    /**\n     * Get the user\n     * @param userId - ID of the user to get\n     * @returns The user object\n     * @async\n     */\n    public async _getUser<T extends BaseUser>(userID: string): Promise<T> {\n        const user = await this.dataService._getUser<T>(userID);\n        return user;\n    }\n\n    /**\n     * Login a user\n     * @param user - The login request\n     * @returns True if the login succeeded\n     * @async\n     */\n    public async _loginUser(user: LoginRequest): Promise<AuthenticationDetails> {\n        const authenticationDetails = await this.authenticationService.authenticate(user);\n        if (authenticationDetails.authenticated === true) {\n            this._userId = this.authenticationService.getUserId();\n            this._primaryUserRole = this.authenticationService.getPrimaryUserRole();\n        }\n        return authenticationDetails;\n    }\n\n    /**\n     * Logout the user\n     * @param redirectRoute - The route to redirect to after logging out\n     */\n    public _logoutUser(redirectRoute: string = ''): void {\n        this._userId = null;\n        this.authenticationService.logoutUser();\n        if (redirectRoute) {\n            this.router.navigate([redirectRoute]);\n        }\n    }\n\n    /**\n     * Register a new user\n     * @param newUser - The new user request object\n     * @param secure - An enum indicating whether the API endpoint is secure\n     * @returs The new user\n     * @async\n     */\n    public async _registerUser<T extends BaseNewUserRequest, U extends BaseUser>(\n        newUser: T,\n        secure: Secure = Secure.false\n    ): Promise<U> {\n        const user = await this.authenticationService.registerUser<T, U>(\n            newUser,\n            secure\n        );\n        // if (user) {\n        //   this._userId = this.authenticationService.getUserId();\n        //   this._primaryUserRole = this.authenticationService.getPrimaryUserRole();\n        // }\n        return user;\n    }\n\n    /**\n     * Request a password reset\n     * @param email - The email address of the user requesting the password reset\n     * @returns true if the request succeeded\n     * @async\n     */\n    public async _requestPasswordReset(email: string): Promise<boolean> {\n        const passwordResetRequest = new BasePasswordResetRequest(email);\n        const result = await this.dataService._requestPasswordReset(\n            passwordResetRequest\n        );\n        return result;\n    }\n\n    /**\n     * Request a password reset token. This method is only used for testing.\n     * @param email - The email address of the user requesting the password reset\n     * @returns The password reset token\n     * @async\n     */\n    public async _requestPasswordResetToken(email: string): Promise<string> {\n        const passwordResetRequest = new BasePasswordResetRequest(email);\n        const result = await this.dataService._requestPasswordResetToken(\n            passwordResetRequest\n        );\n        return result;\n    }\n\n    public async _resendVerificationEmail(email: string): Promise<boolean> {\n        return await this.dataService._resendVerificationEmail(\n            email\n        );\n    }\n\n    /**\n     * Reset a user password\n     * @param token - The password reset token\n     * @param userId - The ID of the user\n     * @param newPassword - The user's new password\n     * @returns True if the password reset succeeded\n     * @async\n     */\n    public async _resetPassword(\n        token: string,\n        userId: string,\n        newPassword: string\n    ): Promise<boolean> {\n        const resetRequest = new PasswordReset(token, userId, newPassword);\n        const result = this.dataService._resetPassword(resetRequest);\n        return result;\n    }\n\n    /**\n     * Update a user\n     * @param user - The user to update\n     * @returns The updated user\n     * @async\n     */\n    public async _updateUser<T extends BaseUser>(user: T): Promise<T> {\n        const result = await this.dataService._updateUser(user);\n        return result;\n    }\n\n    /**\n     * Validate a password reset token\n     * @param passwordResetToken - The password reset token\n     * @returns A validate password reset token response object\n     * @async\n     */\n    public async _validatePasswordResetToken(\n        passwordResetToken: string\n    ): Promise<ValidatePasswordResetTokenResponse> {\n        const result = await this.dataService._validatePasswordResetToken(\n            passwordResetToken\n        );\n        return result;\n    }\n\n    /**\n     * Validate a verify email token\n     * @param verifyEmailToken - The verify email token\n     * @returns A validate verify email token response object\n     */\n    public async _validateVerifyEmailToken(\n        verifyEmailToken: string\n    ): Promise<ValidateVerifyEmailTokenResponse> {\n        const result = await this.dataService._validateVerifyEmailToken(\n            verifyEmailToken\n        );\n        return result;\n    }\n}\n","/**\n * An enum that represents filter cases\n */\nexport enum FilterCase {\n  /** Case insensitive */\n  CaseInsensitive,\n\n  /** Case sensitive */\n  CaseSensitive\n}\n","/** An enum that represents filter scope */\nexport enum FilterScope {\n  /** The filtered content must contain the filter text */\n  Contains,\n\n  /** The filtered content must start with the filter text */\n  StartsWith,\n\n  /** The filtered content must end with the filte text */\n  EndsWith\n}\n","/**\n * An enum representing sort order\n */\nexport enum Sort {\n  /** Sort ascending */\n  Ascending,\n\n  /** Sort descending */\n  Descending\n}\n","/**\n * An enum representing the way the collection utility determines uniqueness\n */\nexport enum UniqueMode {\n  /** Use the object's ID to determine uniqueness */\n  Id,\n\n  /** Use the object's properties to determine uniqueness */\n  Object\n}\n","/**\n * An enum representing whether a collection utility action should enforce uniqueness\n */\nexport enum Unique {\n  /** Enforce unqiueness */\n  True,\n\n  /** Do not enforce uniqueness */\n  False\n}\n","import { FilterCase } from '../_enums/filter-case.enum';\nimport { FilterScope } from '../_enums/filter-scope.enum';\n\n/**\n * A class store store filter options\n */\nexport class FilterOptions {\n  /**\n   * Constructor\n   * @param fitlerCase - Enum indicating the filter case option\n   * @param fitlerScope - Enum indicating the filter scope option\n   */\n  constructor(\n    public fitlerCase: FilterCase = FilterCase.CaseInsensitive,\n    public fitlerScope: FilterScope = FilterScope.Contains\n  ) {}\n}\n","import { Sort } from '../_enums/sort.enum';\n\n/**\n * A class to store sort options\n */\nexport class SortOption {\n  /**\n   * Constructor\n   * @param key - The object property to use for sorting\n   * @param order - The sort order\n   */\n  constructor(public key: string, public order: Sort) {}\n}\n","/**\n * A regex object to validate strong passwords\n */\nexport const STRONG_PASSWORD_REGEX = new RegExp(\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/\n);\n","/**\n * A regex object to validate ISO dates\n */\n// tslint:disable-next-line:max-line-length\nexport const ISO_DATE_REGEX = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\n","/**\n * A regex object to validate latitudes\n */\nexport const LATITUDE_REGEX = /^[-+]?(?:[1-8]?\\d(?:\\.\\d+)?|90(\\.0+)?)$/;\n","/**\n * A regex object to validate longitudes\n */\nexport const LONGITUDE_REGEX = /^[-+]?(?:180(?:\\.0+)?|(?:(?:1[0-7]\\d)|(?:[1-9]?\\d))(?:\\.\\d+)?)$/;\n","/**\n * A regex object to validate phone numbers\n */\nexport const PHONE_NUMBER_REGEX = /^(?:[\\+0]?\\d[\\s-]?)?(?:(?:\\(\\d{3}\\)[\\s-]?)|(?:\\d{3})[\\s-]?)?\\d{3}[\\s\\-]?\\d{4}$/;\n\n/*\nHandles the following cases\n\n1234567\n123-4567\n5551234567\n555-123-4567\n(555) 123-4567\n15551234567\n1-555-123-4567\n1 555 123-4567\n1 (555) 123-4567\n+1 (555) 123-4567\n01 (555) 123-4567\n*/\n","/**\n * A regex object to validate URLs\n */\n// export const ValidUrlRegex = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:\\/?#[\\]@!\\$&'\\(?:\\)\\*\\+,;=.]+$/gim;\nexport const URL_REGEX = /^(?:http(?:s)?:\\/\\/)[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:\\/?#[\\]@!\\$&'\\(?:\\)\\*\\+,;=.]+$/i;\n","/**\n * A regex object to validate zip codes\n */\nexport const ZIP_CODE_REGEX = /^\\d{5}(?:[-\\s]\\d{4})?$/;\n","import { STRONG_PASSWORD_REGEX } from './_constants/strong-password.regex';\nimport { ISO_DATE_REGEX } from './_constants/iso_date.regex';\nimport { LATITUDE_REGEX } from './_constants/latitude-regex.const';\nimport { LONGITUDE_REGEX } from './_constants/longitude-regex.const';\nimport { PHONE_NUMBER_REGEX } from './_constants/phone-number-regex.const';\nimport { URL_REGEX } from './_constants/url-regex.const';\nimport { ZIP_CODE_REGEX } from './_constants/zip-code-regex.const';\n\n/**\n * A regular expression utility\n */\nexport class RegexUtil {\n  /**\n   * Determine if the passed string is an ISO date\n   * @param text - The text to test\n   * @returns True if the passed text is an ISO date\n   */\n  public static isIsoDate(text: string): boolean {\n    if (ISO_DATE_REGEX.test(text) === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the passed string is a latitude\n   * @param text - The text to test\n   * @returns True if the passed text is a latitude\n   */\n  public static isLatitude(text: string): boolean {\n    if (LATITUDE_REGEX.test(text) === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the passed string is a longitude\n   * @param text - The text to test\n   * @returns True if the passed text is a longitude\n   */\n  public static isLongitude(text: string): boolean {\n    if (LONGITUDE_REGEX.test(text) === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the passed string is a phone number\n   * @param text - The text to test\n   * @returns True if the passed text is a phone number\n   */\n  public static isPhoneNumber(text: string): boolean {\n    if (PHONE_NUMBER_REGEX.test(text) === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the passed string is a strong password\n   * @param text - The text to test\n   * @returns True if the passed text is a strong password\n   */\n  public static isStrongPassword(text: string): boolean {\n    if (STRONG_PASSWORD_REGEX.test(text) === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the passed text is a URL\n   * @param text - The text to test\n   * @returns True if the passed text is a URL\n   */\n  public static isUrl(text: string): boolean {\n    if (URL_REGEX.test(text) === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Determine if the passed text is a zip code\n   * @param text - The text to test\n   * @returns True if the passed text is a zip code\n   */\n  public static isZipCode(text: string): boolean {\n    if (ZIP_CODE_REGEX.test(text) === true) {\n      return true;\n    }\n    return false;\n  }\n}\n","import { SortOption } from './_models/sort-option.model';\nimport { BaseModel } from '../../models/base/base.model';\nimport { FilterOptions } from './_models/filter-options.model';\nimport { UniqueMode } from './_enums/unique-mode.enum';\nimport { Unique } from './_enums/unique.enum';\nimport { Sort } from './_enums/sort.enum';\nimport { FilterScope } from './_enums/filter-scope.enum';\nimport { FilterCase } from './_enums/filter-case.enum';\nimport { RegexUtil } from '../regex/regex.util';\nimport * as _ from 'lodash';\n\n/**\n * A utility for sorting and filtering arrays\n */\nexport class CollectionUtil {\n  // ********************\n  // Public Static methods\n  // ********************\n\n  /**\n   * Append an item to an array\n   * @param collection - The array of items\n   * @param item - The item to append to the array\n   * @param unique - Enum indicating whether uniqueness is enforced\n   * @param uniqueMode - Enum indicating how uniqueness will be determined\n   * @returns True if the item was successfully appended\n   */\n  public static append<T>(\n    collection: T[],\n    item: T,\n    unique: Unique = Unique.True,\n    uniqueMode: UniqueMode = UniqueMode.Id\n  ): boolean {\n    if (unique === Unique.True) {\n      if (\n        uniqueMode === UniqueMode.Id &&\n        item.hasOwnProperty('_id') &&\n        CollectionUtil.isUniqueById(collection, item) === false\n      ) {\n        return false;\n      } else if (\n        uniqueMode === UniqueMode.Object &&\n        CollectionUtil.isUniqueByObject(collection, item) === false\n      ) {\n        return false;\n      }\n    }\n    collection.push(item);\n    return true;\n  }\n\n  /**\n   * Fitler an array of objects\n   * @param collection - The array of objects to filter\n   * @param filter - The filter string\n   * @param filterColumns - The object properties to use when filtering\n   * @param filterOptions - The filter options\n   * @returns An array of filtered objects\n   */\n  public static filter<T>(\n    collection: T[],\n    filter: string,\n    filterColumns: string[],\n    filterOptions?: FilterOptions\n  ): T[] {\n    // If the filter string or collection are not valid then just return the collection unchanged\n    if (!filter || !collection) {\n      return collection;\n    }\n    if (!filterOptions) {\n      filterOptions = new FilterOptions();\n    }\n    // Filter the collection using a lambda expression\n    const filteredData = collection.filter(o => {\n      // For each of the filter columns\n      for (const filterColumn of filterColumns) {\n        // Get the text of the current column\n        const text: string = o[filterColumn];\n        // Create a regular expression for the passed filter string and filter options\n        const regExp = this.getFilterRegex(filter, filterOptions);\n        // If the contents of the current column matches the filter string then\n        if (text.search(regExp) >= 0) {\n          // Return true (collection row is included in the filtered data)\n          return true;\n        }\n      }\n      // Return false (collection row is not included in the filtered data)\n      return false;\n    });\n    // Return the filtered data\n    return filteredData;\n  }\n\n  /**\n   * Find an object in an array of objects by matching an object property\n   * @param collection - The array of objects to search\n   * @param property - The object property to search\n   * @param value - The value to match\n   * @returns The matching object\n   */\n  public static find<T>(collection: T[], property: string, value: any): T {\n    const object = collection.find(o => o[property] === value);\n    return object;\n  }\n\n  /**\n   * Find an object in an array of objects by matching the object's ID\n   * @param collection - The array of objects to search\n   * @param id - The object ID to search for\n   * @returns The matching object\n   */\n  public static findById<T extends BaseModel>(collection: T[], id: string): T {\n    const object = collection.find(o => o._id === id);\n    return object;\n  }\n\n  /**\n   * Get the index of an object in an array of objects\n   * @param collection - The array of objects to search\n   * @param item - The item to search for\n   * @returns The index of the item in the array (zero-based)\n   */\n  public static findIndex<T>(collection: T[], item: T): number {\n    const index = collection.findIndex(o => o === item);\n    return index;\n  }\n\n  /**\n   * Insert an object into an array of objects\n   * @param collection - The array of objects into which the object will be inserted\n   * @param item - The item to insert into the array\n   * @param index - The desired location of the item in the array\n   * @returns True if the insert succeeded\n   */\n  public static insert<T>(\n    collection: T[],\n    item: T,\n    index: number = 0\n  ): boolean {\n    collection.splice(index, 0, item);\n    return true;\n  }\n\n  /**\n   * Sort an array of objects by mutliple keys. The method sorts the passed array in-place as opposed to\n   * returning the sorted array.\n   * @param collection - The array of objects to sort\n   * @param sortOptions - The sort options\n   */\n  public static multiKeySort<T>(\n    collection: T[],\n    ...sortOptions: SortOption[]\n  ): void {\n    collection.sort((a: any, b: any) => {\n      for (const sortOption of sortOptions) {\n        if (typeof a[sortOption.key] === 'boolean') {\n          if (!a[sortOption.key] && b[sortOption.key]) {\n            return sortOption.order === Sort.Ascending ? -1 : 1;\n          } else if (a[sortOption.key] && !b[sortOption.key]) {\n            return sortOption.order === Sort.Ascending ? 1 : -1;\n          }\n        } else if (\n          !RegexUtil.isIsoDate(a[sortOption.key]) &&\n          typeof a[sortOption.key] === 'string'\n        ) {\n          if (\n            a[sortOption.key].toLowerCase() < b[sortOption.key].toLowerCase()\n          ) {\n            return sortOption.order === Sort.Ascending ? -1 : 1;\n          } else if (\n            a[sortOption.key].toLowerCase() > b[sortOption.key].toLowerCase()\n          ) {\n            return sortOption.order === Sort.Ascending ? 1 : -1;\n          }\n        } else {\n          if (a[sortOption.key] < b[sortOption.key]) {\n            return sortOption.order === Sort.Ascending ? -1 : 1;\n          } else if (a[sortOption.key] > b[sortOption.key]) {\n            return sortOption.order === Sort.Ascending ? 1 : -1;\n          }\n        }\n      }\n      return 0;\n    });\n  }\n\n  /**\n   * Remove an object from an array of objects by matching the object ID\n   * @param collection - The array of objects from which to remove an object\n   * @param item - The item to remove from the array\n   * @returns The array of objects with the item removed\n   */\n  public static remove<T extends BaseModel>(collection: T[], item: T): T[] {\n    const updatedCollection = collection.filter(o => o._id !== item._id);\n    return updatedCollection;\n  }\n\n  /**\n   * Remove an object from an array of object by matching the passed object ID\n   * @param collection - The array of objects from which to remove an object\n   * @param ID - The ID of the item to remove from the array\n   * @returns The array of objects with the item removed\n   */\n  public static removeById<T extends BaseModel>(\n    collection: T[],\n    id: string\n  ): T[] {\n    const updatedCollection = collection.filter(o => o._id !== id);\n    return updatedCollection;\n  }\n\n  /**\n   * Shuffly an array of objects\n   * @param collection - The array of objects to shuffly\n   * @returns The shuffled array of objects\n   */\n  public static shuffle<T>(collection: T[]): T[] {\n    let currentIndex = collection.length;\n    let temporaryValue: T;\n    let randomIndex: number;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // Swap it with the current element.\n      temporaryValue = collection[currentIndex];\n      collection[currentIndex] = collection[randomIndex];\n      collection[randomIndex] = temporaryValue;\n    }\n\n    return collection;\n  }\n\n  /**\n   * Sort an array of objects by a single property. The method sorts the passed array in-place as opposed to\n   * returning the sorted array.\n   * @param collection - The array of objects to sort\n   * @param key - The property to use for sorting\n   * @param order - The sort order\n   */\n  public static sort<T>(collection: T[], key: string, order: Sort): void {\n    collection.sort((a: any, b: any) => {\n      if (!RegexUtil.isIsoDate(a[key]) && typeof a[key] === 'string') {\n        if (a[key].toLowerCase() < b[key].toLowerCase()) {\n          return order === Sort.Ascending ? -1 : 1;\n        } else if (a[key].toLowerCase() > b[key].toLowerCase()) {\n          return order === Sort.Ascending ? 1 : -1;\n        }\n        return 0;\n      } else {\n        if (a[key] < b[key]) {\n          return order === Sort.Ascending ? -1 : 1;\n        } else if (a[key] > b[key]) {\n          return order === Sort.Ascending ? 1 : -1;\n        }\n        return 0;\n      }\n    });\n  }\n\n  /**\n   * Update an object in an array of objects. Use the object's ID to match objects.\n   * @param collection - The array of objects that contains the object to update\n   * @param item - The item to update\n   * @param addIfMissing - Boolean indicating whether to add the item if it is not present in the array\n   * @returns The array of objects with the updated item\n   */\n  public static update<T extends BaseModel>(\n    collection: T[],\n    item: T,\n    addIfMissing: boolean = false\n  ): T[] {\n    const index = collection.findIndex(o => o._id === item._id);\n    if (index < 0) {\n      if (addIfMissing === true) {\n        collection.push(item);\n        return collection;\n      } else {\n        return collection;\n      }\n    }\n    collection[index] = item;\n    return collection;\n  }\n\n  // ********************\n  // Private Static methods\n  // ********************\n\n  /**\n   * Create a regular expression object that implements the passed filter options\n   * @param filter - The filter text\n   * @param filterOptions - The filter options\n   * @returns A regular expression object\n   */\n  private static getFilterRegex(\n    filter: string,\n    filterOptions: FilterOptions\n  ): RegExp {\n    filter = this.escapeRegexCharacters(filter);\n    let regexString: string;\n    switch (filterOptions.fitlerScope) {\n      case FilterScope.StartsWith:\n        regexString = '^' + filter;\n        break;\n      case FilterScope.EndsWith:\n        regexString = filter + '$';\n        break;\n      default:\n        regexString = filter;\n        break;\n    }\n    let regExp: RegExp;\n    if (filterOptions.fitlerCase === FilterCase.CaseSensitive) {\n      regExp = new RegExp('.*' + regexString + '.*');\n    } else {\n      regExp = new RegExp('.*' + regexString + '.*', 'i');\n    }\n    return regExp;\n  }\n\n  /**\n   * Determine whether an object exists in an array of objects by comparing the object properties\n   * @param collection - The array of objects to search\n   * @param item - The item to search for\n   * @returns True if the object is unique\n   */\n  private static isUniqueByObject<T>(collection: T[], item: T) {\n    for (const collectionItem of collection) {\n      if (_.isEqual(collectionItem, item)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine whether an object exists in an array of objects by comparing the object IDs\n   * @param collection - The array of objects to search\n   * @param item - The item to search for\n   * @returns True if the object is unique\n   */\n  private static isUniqueById<T>(collection: any[], item: any) {\n    const matchingItem = collection.find(o => o._id === item._id);\n    if (matchingItem) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Escape a regular expression string\n   * @param regexString - The regex string to escape\n   * @returns The escaped regular expression string\n   */\n  private static escapeRegexCharacters(regexString: string): string {\n    const escapedText = regexString.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    return escapedText;\n  }\n}\n","import { plainToClass } from 'class-transformer';\nimport { ClassType } from 'class-transformer/ClassTransformer';\nimport * as _ from 'lodash';\n\n/**\n * A utility for copying objects\n */\nexport class ObjectCopyUtil {\n  // ********************\n  // Static methods\n  // ********************\n\n  /**\n   * Perform a default (deep) copy of the object\n   * @param objectToCopy - The object to copy\n   * @returns The copied object\n   */\n  static copy<T>(objectToCopy: T): T {\n    return ObjectCopyUtil.deepCopy(objectToCopy);\n  }\n\n  /**\n   * Perform a deep copy of the object\n   * @param objectToCopy - The object to copy\n   * @returns The copied object\n   */\n  static deepCopy<T>(objectToCopy: T): T {\n    const cloneObj = _.cloneDeep(objectToCopy);\n    return cloneObj;\n  }\n\n  /**\n   * Perform a shallow copy of the object\n   * @param objectToCopy - The object to copy\n   * @returns The copied object\n   */\n  static shallowCopy(objectToCopy: any): any {\n    return { ...objectToCopy };\n  }\n\n  /**\n   * Perform a typed of the object. Copy the object and then apply the properties of the passed class.\n   * @param objectToCopy - The object to copy\n   * @param type - The prototype whose methods will be copied\n   * @returns The copied object\n   */\n  static typedCopy<T>(objectToCopy: any, type: ClassType<T>): T {\n    let cloneObj = this.deepCopy(objectToCopy);\n    cloneObj = plainToClass(type, cloneObj);\n    return cloneObj;\n  }\n}\n","/**\n * A utility to combine the properties of multiple classes\n */\nexport class MixinUtil {\n  /**\n   *\n   * @param derivedCtor - The object to receive the new properties\n   * @param baseCtors - The objects from which to copy properties\n   */\n  public static ApplyMixins(derivedCtor: any, baseCtors: any[]) {\n    baseCtors.forEach(baseCtor => {\n      Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {\n        derivedCtor.prototype[name] = baseCtor.prototype[name];\n      });\n    });\n  }\n}\n","import * as _ from 'lodash';\nimport { Subject } from 'rxjs';\nimport { PaginationEvent } from './_models/pagination-event.model';\nimport { BaseModel } from '../../models/base/base.model';\nimport { SortOption } from '../collection/_models/sort-option.model';\nimport { CollectionUtil } from '../collection/collection.util';\nimport { FilterOptions } from '../collection/_models/filter-options.model';\nimport { FilterCase } from '../collection/_enums/filter-case.enum';\nimport { FilterScope } from '../collection/_enums/filter-scope.enum';\n\n/**\n * A utility to implement pagination\n */\nexport class PaginatorUtil<T extends BaseModel> {\n  // **********************\n  // * Public properties\n  // **********************\n\n  /** An RXJS subject that will emit events when pagination properties change */\n  public paginationSubject$ = new Subject<PaginationEvent>();\n\n  /** A get accessor for the query string */\n  public get query(): string {\n    return this._query;\n  }\n\n  /** A get accessor for the hasFilter property */\n  public get hasFilter(): boolean {\n    return this._query ? true : false;\n  }\n\n  /** A get accessor for the array length */\n  public get length(): number {\n    return this._length;\n  }\n\n  /** A set accessor for the array length */\n  public set length(length: number) {\n    this._length = length;\n  }\n\n  /** A get accessor for the current page index */\n  public get pageIndex(): number {\n    return this._pageIndex;\n  }\n\n  /** A set accessor for the current page index */\n  public set pageIndex(pageIndex: number) {\n    this._pageIndex = pageIndex;\n  }\n\n  /** A get accessor for the page size */\n  public get pageSize(): number {\n    return this._pageSize;\n  }\n\n  /** A set accessor for the page size */\n  public set pageSize(pageSize: number) {\n    this._pageSize = pageSize;\n  }\n\n  /** A get accessor for the previous page index */\n  public get previousPageIndex(): number {\n    return this._previousPageIndex;\n  }\n\n  /** A get accessor for the page size options */\n  public get pageSizeOptions(): number[] {\n    return this._pageSizeOptions;\n  }\n\n  /** A get accessor for the noData property */\n  public get noData(): boolean {\n    return this._noData;\n  }\n\n  /** A get accessor for the sort optioins */\n  public get sortOptions(): SortOption[] {\n    return this._sortOptions;\n  }\n\n  // **********************\n  // * Private properties\n  // **********************\n\n  /** The original data array */\n  private _data: any[];\n\n  /** The filtered data array */\n  private _filteredData: any[];\n\n  /** The length of the filtered array */\n  private _length: number;\n\n  /** The current page index */\n  private _pageIndex = 0;\n\n  /** The page size */\n  private _pageSize = 5;\n\n  /** The previous page index */\n  private _previousPageIndex: number;\n\n  /** The page size options */\n  private _pageSizeOptions: number[];\n\n  /** The no data flag */\n  private _noData: boolean;\n\n  /** The sort options */\n  private _sortOptions: SortOption[];\n\n  /** The query string */\n  private _query: string;\n\n  /** The columns to use when filtering */\n  private _filterColumns: string[] = [];\n\n  /** The filter options */\n  private _filterOptions: FilterOptions = new FilterOptions();\n\n  /**\n   * Constructor\n   * @param pageSize - The page size\n   * @param pageSizeOptions - The page size options\n   * @param sortOptions - The sort options\n   */\n  constructor(\n    pageSize: number = 5,\n    pageSizeOptions: number[] = [5, 10, 20, 50],\n    ...sortOptions: SortOption[]\n  ) {\n    this._pageSize = pageSize;\n    this._pageSizeOptions = pageSizeOptions;\n    this._sortOptions = sortOptions;\n  }\n\n  // **********************\n  // * Public methods\n  // **********************\n\n  /**\n   * Append an object to the data array\n   * @param object - The object to append\n   * @param pageIndex - The page to go to after appending the object\n   * @returns The modified page of data\n   */\n  public append(object: T, pageIndex?: number): T[] {\n    if (object) {\n      this._data.push(object);\n      // this._length = this._data.length;\n    }\n    return this.paginate(pageIndex);\n  }\n\n  /**\n   * Delete an object from the data array. Use the object ID to locate the object to delete.\n   * @param id - The ID of the object to delete.\n   * @param pageIndex - The page to go to after deleting the object\n   * @returns The modified page of data\n   */\n  public deleteById(id: string, pageIndex?: number): T[] {\n    if (id) {\n      this._data = this._data.filter(f => f._id !== id);\n    }\n    return this.paginate(pageIndex);\n  }\n\n  /**\n   * Find an object in the data array\n   * @param property - The object property to use for matching\n   * @param value - The property value to look for\n   * @returns The matching object\n   */\n  public find(property: string, value: any): T {\n    const result = CollectionUtil.find(this._data, property, value);\n    return result;\n  }\n\n  /**\n   * Find an object in the data array by matching the object ID\n   * @param id - The ID of the object to find\n   * @returns The matching object\n   */\n  public getById(id: string): T {\n    const object = CollectionUtil.findById(this._data, id);\n    return object;\n  }\n\n  /**\n   * Go to the start of the data array\n   */\n  public goFirst() {\n    this._pageIndex = 0;\n    return this.paginate();\n  }\n\n  /** Go to the end of the data array */\n  public goLast() {\n    const pageCount = Math.floor(this._length / this._pageSize);\n    this._pageIndex = pageCount - 1;\n    if (this._pageIndex < 0) {\n      this._pageIndex = 0;\n    }\n  }\n\n  /**\n   * Insert an object in the data array\n   * @param object - The object to insert\n   * @param pageIndex - The page to go to after inserting the object\n   * @returns The modified page of data\n   */\n  public insert(object: T, pageIndex?: number): T[] {\n    if (object) {\n      this._data.unshift(object);\n    }\n    return this.paginate(pageIndex);\n  }\n\n  /**\n   * Load the passed data into the data array\n   * @param data - The data to load\n   * @returns The first page of data\n   */\n  public loadData(data: T[]): T[] {\n    this._data = data;\n    this._length = data.length;\n    this._noData = data.length === 0 ? true : false;\n    const filteredData = this.paginate();\n    return filteredData;\n  }\n\n  /**\n   * Update the paginator properties and trigger a pagination event\n   * @param pageData - The paginator properties to update\n   */\n  public async onPagination(pageData: PaginationEvent) {\n    pageData.pageSizeChanged = this._pageSize !== pageData.pageSize;\n    this._length = pageData.length;\n    this._pageIndex = pageData.pageIndex;\n    this._pageSize = pageData.pageSize;\n    this._previousPageIndex = pageData.previousPageIndex;\n    this.paginationSubject$.next(pageData);\n  }\n\n  /**\n   * Trigger a pagination event\n   * @param pageIndex - The page to go to after re-sorting and filtering\n   * @Returns The current page of data\n   */\n  public paginate(pageIndex?: number): T[] {\n    this.sort();\n    this._filteredData = this.filter();\n    this._length = this._filteredData.length;\n    if (pageIndex !== undefined) {\n      this._pageIndex = pageIndex;\n    }\n    let start = this._pageIndex * this._pageSize;\n    if (start >= this.length) {\n      this._pageIndex--;\n      if (this.pageIndex < 0) {\n        this.pageIndex = 0;\n      }\n      start = this._pageIndex * this._pageSize;\n    }\n    const end = start + this._pageSize;\n    const dataToReturn = _.slice(this._filteredData, start, end);\n    return dataToReturn;\n  }\n\n  /**\n   * Set the sort options\n   * @param sortOptions - The sort options\n   */\n  public setSortOptions(...sortOptions: SortOption[]) {\n    this._sortOptions = sortOptions;\n  }\n\n  /**\n   * Set the filter columns\n   * @param filterColumns - The filter columns\n   */\n  public setFilterColumns(...filterColumns: string[]): void {\n    this._filterColumns = filterColumns;\n  }\n\n  /**\n   * Set the filter options\n   * @param fitlerCase - The filter case option\n   * @param fitlerScope - The filter scope option\n   */\n  public setFilterOptions(\n    fitlerCase: FilterCase,\n    fitlerScope: FilterScope\n  ): void {\n    this._filterOptions = new FilterOptions(fitlerCase, fitlerScope);\n  }\n\n  /**\n   * Set the filter query\n   * @param query - The filter query\n   * @returns A page of data\n   */\n  public setQuery(query: string): T[] {\n    this._query = query;\n    return this.paginate();\n  }\n\n  /**\n   * Update an object in the data array\n   * @param object - The object to update\n   * @param pageIndex - The page to go to after updating\n   * @Returns The current page of data\n   */\n  public update(object: T, pageIndex?: number): T[] {\n    const index = this._data.findIndex(o => o._id === object._id);\n    if (index < 0) {\n      this._data.push(object);\n      // this._length = this._data.length;\n    } else {\n      this._data[index] = object;\n    }\n    return this.paginate(pageIndex);\n  }\n\n  /**\n   * Apply the current filter\n   */\n  private filter(): T[] {\n    if (!this._query || !this._data) {\n      return this._data;\n    }\n    const filteredData = CollectionUtil.filter(\n      this._data,\n      this._query,\n      this._filterColumns,\n      this._filterOptions\n    );\n    return filteredData;\n  }\n\n  /**\n   * Apply the current sort options\n   */\n  private sort(): void {\n    if (!this._sortOptions) {\n      return;\n    }\n    if (!this._data) {\n      return;\n    }\n    CollectionUtil.multiKeySort(this._data, ...this._sortOptions);\n  }\n}\n","import * as ShortId from 'shortid';\n\n/**\n * A utility for generating Short IDs\n */\nexport class ShortIdUtil {\n  /**\n   * Generate a short ID\n   * @returns A short ID string\n   */\n  public static generateId(): string {\n    let id = ShortId.generate();\n    while (id.indexOf('_') >= 0 || id.indexOf('-') >= 0) {\n      id = ShortId.generate();\n    }\n    return id;\n  }\n}\n","import { of } from 'rxjs';\nimport { DialogResult } from '../../../models/dialog/dialog-result.model';\nimport { DialogButton } from '../../../enums/dialog-button.enum';\n\nexport class MatDialogMock {\n  public dialogResult = new DialogResult(DialogButton.OK);\n\n  public open() {\n    return {\n      afterClosed: () => of(this.dialogResult)\n    };\n  }\n}\n","import { FormControl } from '@angular/forms';\n\nexport const validateStrongPassword = (control: FormControl) => {\n  try {\n    const value = control.value;\n\n    if (/(?=.*[a-z])/.test(value) === false) {\n      return {\n        lowerCase: {\n          invalid: true\n        }\n      };\n    }\n    if (/(?=.*[A-Z])/.test(value) === false) {\n      return {\n        upperCase: {\n          invalid: true\n        }\n      };\n    }\n    if (/(?=.*[0-9])/.test(value) === false) {\n      return {\n        number: {\n          invalid: true\n        }\n      };\n    }\n    if (\n      /(?=.[@%/'\"!#,~&;`_<>\\:\\.\\^\\$\\*\\+\\-\\?\\(\\)\\[\\]\\{\\}\\\\\\|])/.test(value) ===\n      false\n    ) {\n      return {\n        specialCharacter: {\n          invalid: true\n        }\n      };\n    }\n    const stringValue: string = value;\n    if (value.length < 8) {\n      return {\n        minLength: {\n          invalid: true\n        }\n      };\n    }\n    if (value.length > 20) {\n      return {\n        maxLength: {\n          invalid: true\n        }\n      };\n    }\n    return {};\n  } catch (error) {\n    return {\n      invalidPassword: {\n        invalid: true\n      }\n    };\n  }\n};\n","/*\n * Public API Surface of leatherman\n */\n\nexport * from './lib/leatherman.module';\nexport * from './lib/components/index';\nexport * from './lib/constants/index';\nexport * from './lib/config/index';\nexport * from './lib/dialogs/index';\nexport * from './lib/enums/index';\nexport * from './lib/models/index';\nexport * from './lib/services/index';\nexport * from './lib/util/index';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AngularModule as ɵa} from './lib/angular.module';"],"names":["SessionState","_.isEqual","_.cloneDeep","_.slice","ShortId.generate"],"mappings":"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"}